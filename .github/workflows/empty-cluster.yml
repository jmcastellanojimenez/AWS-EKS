name: üöÄ Empty EKS Cluster

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Cluster Action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply  
        - destroy
      environment:
        description: 'Target Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      confirm_destroy:
        description: 'For DESTROY: type CONFIRM-DESTROY'
        required: false
        type: string
      auto_approve:
        description: 'Auto-approve apply (use with caution)'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read
  pull-requests: write
  issues: write
  actions: write

env:
  TF_VERSION: '1.6.0'
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

jobs:
  validate-inputs:
    name: üîç Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      action: ${{ steps.determine-action.outputs.action }}
      environment: ${{ steps.determine-action.outputs.environment }}
      should-proceed: ${{ steps.validate.outputs.should-proceed }}
    steps:
      - name: Determine Action
        id: determine-action
        run: |
          echo "action=${{ inputs.action }}" >> $GITHUB_OUTPUT
          echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT

      - name: Validate Destroy Confirmation
        id: validate
        run: |
          action="${{ steps.determine-action.outputs.action }}"
          environment="${{ steps.determine-action.outputs.environment }}"
          
          if [[ "$action" == "destroy" ]]; then
            if [[ "${{ inputs.confirm_destroy }}" != "CONFIRM-DESTROY" ]]; then
              echo "‚ùå Destroy action requires 'CONFIRM-DESTROY' confirmation"
              echo "should-proceed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            echo "‚úÖ Destroy confirmation validated"
          fi
          
          if [[ "$environment" == "prod" && "$action" == "apply" ]]; then
            echo "‚ö†Ô∏è Production deployment requires manual approval"
          fi
          
          echo "should-proceed=true" >> $GITHUB_OUTPUT

  terraform-operation:
    name: üèóÔ∏è Empty EKS Cluster - ${{ needs.validate-inputs.outputs.action }}
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: needs.validate-inputs.outputs.should-proceed == 'true'
    environment: ${{ needs.validate-inputs.outputs.environment }}
    outputs:
      terraform-output: ${{ steps.output.outputs.terraform-output }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-EmptyCluster-${{ needs.validate-inputs.outputs.action }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: |
          terraform init -backend-config="bucket=eks-learning-lab-terraform-state-${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Terraform Validate
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: |
          if [[ "${{ needs.validate-inputs.outputs.action }}" == "destroy" ]]; then
            terraform plan -destroy -out=tfplan -no-color
          else
            terraform plan -out=tfplan -no-color
          fi
        continue-on-error: true

      - name: Terraform Apply
        if: needs.validate-inputs.outputs.action == 'apply'
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: |
          if [[ "${{ inputs.auto_approve }}" == "true" ]]; then
            terraform apply tfplan
          else
            echo "Manual approval required for apply action"
            exit 1
          fi

      - name: Terraform Destroy
        if: needs.validate-inputs.outputs.action == 'destroy'
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        timeout-minutes: 45
        run: terraform apply tfplan

      - name: Get Terraform Outputs
        id: output
        if: needs.validate-inputs.outputs.action != 'destroy'
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: |
          if terraform state list | grep -q "aws_eks_cluster"; then
            cluster_name=$(terraform output -raw cluster_name || echo "")
            cluster_endpoint=$(terraform output -raw cluster_endpoint || echo "")
            kubeconfig_command=$(terraform output -raw kubeconfig_command || echo "")
            
            echo "terraform-output<<EOF" >> $GITHUB_OUTPUT
            echo "cluster_name=${cluster_name}" >> $GITHUB_OUTPUT
            echo "cluster_endpoint=${cluster_endpoint}" >> $GITHUB_OUTPUT
            echo "kubeconfig_command=${kubeconfig_command}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Generate Kubeconfig
        if: needs.validate-inputs.outputs.action == 'apply'
        run: |
          cluster_name=$(cd terraform/environments/${{ needs.validate-inputs.outputs.environment }} && terraform output -raw cluster_name)
          if [[ -n "$cluster_name" ]]; then
            aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name $cluster_name
            echo "‚úÖ Kubeconfig updated for cluster: $cluster_name"
            kubectl cluster-info
            kubectl get nodes
          fi

      - name: Upload Kubeconfig
        if: needs.validate-inputs.outputs.action == 'apply'
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig-empty-cluster-${{ needs.validate-inputs.outputs.environment }}
          path: ~/.kube/config

  post-action-notifications:
    name: üì¢ Empty Cluster Summary
    runs-on: ubuntu-latest
    needs: [validate-inputs, terraform-operation]
    if: always()
    steps:
      - name: Post Action Summary
        run: |
          action="${{ needs.validate-inputs.outputs.action }}"
          environment="${{ needs.validate-inputs.outputs.environment }}"
          status="${{ needs.terraform-operation.result }}"
          
          echo "## üöÄ Empty EKS Cluster Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action**: $action" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: $environment" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: $status" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$status" == "success" ]]; then
            if [[ "$action" == "apply" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "‚úÖ Empty EKS cluster deployed successfully!" >> $GITHUB_STEP_SUMMARY
              echo "üîß **No tools installed** - cluster is ready for manual configuration" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
              echo "1. Download the kubeconfig artifact" >> $GITHUB_STEP_SUMMARY
              echo "2. Configure kubectl: \`aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name eks-learning-lab-$environment\`" >> $GITHUB_STEP_SUMMARY
              echo "3. Install tools manually as needed" >> $GITHUB_STEP_SUMMARY
            elif [[ "$action" == "destroy" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "‚úÖ Empty EKS cluster destroyed successfully!" >> $GITHUB_STEP_SUMMARY
              echo "üí∞ Resources cleaned up to save costs." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ùå Empty cluster operation failed!" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs for details." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üí∞ Cost Information" >> $GITHUB_STEP_SUMMARY
          echo "- **EKS Control Plane**: \$72/month" >> $GITHUB_STEP_SUMMARY
          echo "- **Worker Nodes**: ~\$9/month (1 t3.medium spot instance)" >> $GITHUB_STEP_SUMMARY
          echo "- **Storage**: ~\$2/month (20GB EBS)" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Estimated**: ~\$83/month" >> $GITHUB_STEP_SUMMARY
name: üöÄ EKS Infrastructure Management

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Infrastructure Action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply  
        - destroy
      environment:
        description: 'Target Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      confirm_destroy:
        description: 'For DESTROY: type CONFIRM-DESTROY'
        required: false
        type: string
      auto_approve:
        description: 'Auto-approve apply (use with caution)'
        required: false
        default: false
        type: boolean
  pull_request:
    paths:
      - 'terraform/**'
      - '.github/workflows/deploy-infrastructure.yml'

permissions:
  id-token: write
  contents: read
  pull-requests: write
  issues: write
  actions: write

env:
  TF_VERSION: '1.6.0'
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

jobs:
  validate-inputs:
    name: üîç Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      action: ${{ steps.determine-action.outputs.action }}
      environment: ${{ steps.determine-action.outputs.environment }}
      should-proceed: ${{ steps.validate.outputs.should-proceed }}
    steps:
      - name: Determine Action
        id: determine-action
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "action=plan" >> $GITHUB_OUTPUT
            echo "environment=dev" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "action=plan" >> $GITHUB_OUTPUT
            echo "environment=dev" >> $GITHUB_OUTPUT
          else
            echo "action=${{ inputs.action }}" >> $GITHUB_OUTPUT
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          fi

      - name: Validate Destroy Confirmation
        id: validate
        run: |
          action="${{ steps.determine-action.outputs.action }}"
          environment="${{ steps.determine-action.outputs.environment }}"
          
          if [[ "$action" == "destroy" ]]; then
            if [[ "${{ inputs.confirm_destroy }}" != "CONFIRM-DESTROY" ]]; then
              echo "‚ùå Destroy action requires 'CONFIRM-DESTROY' confirmation"
              echo "should-proceed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            echo "‚úÖ Destroy confirmation validated"
          fi
          
          if [[ "$environment" == "prod" && "$action" == "apply" ]]; then
            echo "‚ö†Ô∏è Production deployment requires manual approval"
          fi
          
          echo "should-proceed=true" >> $GITHUB_OUTPUT

  pre-checks:
    name: üîß Pre-Action Checks
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: needs.validate-inputs.outputs.should-proceed == 'true'
    outputs:
      cost-estimate: ${{ steps.cost-check.outputs.estimate }}
      security-passed: ${{ steps.security-scan.outputs.passed }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-PreChecks

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Init
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: |
          terraform init -backend-config="bucket=eks-learning-lab-terraform-state-${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Security Scan with TFSec
        id: security-scan
        run: |
          docker run --rm -v $(pwd):/src aquasec/tfsec /src/terraform --format json > tfsec-results.json || true
          
          critical_issues=$(cat tfsec-results.json | jq '.results[] | select(.severity == "CRITICAL") | length' | wc -l)
          high_issues=$(cat tfsec-results.json | jq '.results[] | select(.severity == "HIGH") | length' | wc -l)
          
          echo "Critical issues: $critical_issues"
          echo "High issues: $high_issues"
          
          if [[ $critical_issues -gt 0 ]]; then
            echo "‚ùå Critical security issues found!"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          elif [[ $high_issues -gt 5 ]]; then
            echo "‚ö†Ô∏è Too many high-severity issues found!"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "‚úÖ Security scan passed"
            echo "passed=true" >> $GITHUB_OUTPUT
          fi

      - name: Cost Estimation
        id: cost-check
        run: |
          # Install Infracost
          curl -fsSL https://raw.githubusercontent.com/infracost/infracost/master/scripts/install.sh | sh
          
          cd terraform/environments/${{ needs.validate-inputs.outputs.environment }}
          
          # Generate cost estimate
          /usr/local/bin/infracost breakdown --path . --format json > /tmp/cost-estimate.json || true
          
          if [[ -f /tmp/cost-estimate.json ]]; then
            monthly_cost=$(cat /tmp/cost-estimate.json | jq -r '.totalMonthlyCost // "0"')
            echo "Estimated monthly cost: $${monthly_cost}"
            echo "estimate=${monthly_cost}" >> $GITHUB_OUTPUT
            
            # Check if cost exceeds budget
            if (( $(echo "$monthly_cost > 100" | bc -l) )); then
              echo "‚ùå Estimated cost ($${monthly_cost}) exceeds budget limit ($100)"
              exit 1
            fi
          else
            echo "estimate=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Upload Security Results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: tfsec-results.json

  terraform-operation:
    name: üèóÔ∏è Terraform ${{ needs.validate-inputs.outputs.action }}
    runs-on: ubuntu-latest
    needs: [validate-inputs, pre-checks]
    if: needs.validate-inputs.outputs.should-proceed == 'true' && needs.pre-checks.outputs.security-passed == 'true'
    environment: ${{ needs.validate-inputs.outputs.environment }}
    outputs:
      terraform-output: ${{ steps.output.outputs.terraform-output }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-Terraform-${{ needs.validate-inputs.outputs.action }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: |
          terraform init -backend-config="bucket=eks-learning-lab-terraform-state-${{ secrets.AWS_ACCOUNT_ID }}"

      - name: Terraform Validate
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: |
          if [[ "${{ needs.validate-inputs.outputs.action }}" == "destroy" ]]; then
            terraform plan -destroy -out=tfplan -no-color
          else
            terraform plan -out=tfplan -no-color
          fi
        continue-on-error: true

      - name: Update PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');
            
            try {
              const plan = execSync('cd terraform/environments/${{ needs.validate-inputs.outputs.environment }} && terraform show -no-color tfplan', { encoding: 'utf8' });
              const costEstimate = '${{ needs.pre-checks.outputs.cost-estimate }}';
              
              const comment = `## üèóÔ∏è Terraform Plan Results
              
              ### üí∞ Cost Estimate
              Estimated monthly cost: $${costEstimate}
              
              ### üìã Plan Output
              \`\`\`terraform
              ${plan}
              \`\`\`
              
              **Action**: ${{ needs.validate-inputs.outputs.action }}
              **Environment**: ${{ needs.validate-inputs.outputs.environment }}
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.error('Error creating comment:', error);
            }

      - name: Terraform Apply
        if: needs.validate-inputs.outputs.action == 'apply'
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: |
          if [[ "${{ inputs.auto_approve }}" == "true" ]] || [[ "${{ github.event_name }}" == "push" && "${{ needs.validate-inputs.outputs.environment }}" == "dev" ]]; then
            terraform apply tfplan
          else
            echo "Manual approval required for apply action"
            exit 1
          fi

      - name: Terraform Destroy
        if: needs.validate-inputs.outputs.action == 'destroy'
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        timeout-minutes: 45
        run: terraform apply tfplan

      - name: Get Terraform Outputs
        id: output
        if: needs.validate-inputs.outputs.action != 'destroy'
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: |
          if terraform state list | grep -q "aws_eks_cluster"; then
            cluster_name=$(terraform output -raw cluster_name || echo "")
            cluster_endpoint=$(terraform output -raw cluster_endpoint || echo "")
            kubeconfig_command=$(terraform output -raw kubeconfig_command || echo "")
            
            echo "terraform-output<<EOF" >> $GITHUB_OUTPUT
            echo "cluster_name=${cluster_name}" >> $GITHUB_OUTPUT
            echo "cluster_endpoint=${cluster_endpoint}" >> $GITHUB_OUTPUT
            echo "kubeconfig_command=${kubeconfig_command}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Generate Kubeconfig
        if: needs.validate-inputs.outputs.action == 'apply'
        run: |
          cluster_name=$(cd terraform/environments/${{ needs.validate-inputs.outputs.environment }} && terraform output -raw cluster_name)
          if [[ -n "$cluster_name" ]]; then
            aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name $cluster_name
            kubectl cluster-info
          fi

      - name: Upload Kubeconfig
        if: needs.validate-inputs.outputs.action == 'apply'
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig-${{ needs.validate-inputs.outputs.environment }}
          path: ~/.kube/config


  post-action-notifications:
    name: üì¢ Post-Action Notifications
    runs-on: ubuntu-latest
    needs: [validate-inputs, terraform-operation]
    if: always()
    steps:
      - name: Post Action Summary
        run: |
          action="${{ needs.validate-inputs.outputs.action }}"
          environment="${{ needs.validate-inputs.outputs.environment }}"
          status="${{ needs.terraform-operation.result }}"
          
          echo "## üöÄ EKS Infrastructure Management Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action**: $action" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: $environment" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: $status" >> $GITHUB_STEP_SUMMARY
          echo "**Estimated Cost**: $${{ needs.pre-checks.outputs.cost-estimate }}/month" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$status" == "success" ]]; then
            if [[ "$action" == "apply" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "‚úÖ Infrastructure deployed successfully!" >> $GITHUB_STEP_SUMMARY
              echo "üéØ EKS cluster is ready for use!" >> $GITHUB_STEP_SUMMARY
            elif [[ "$action" == "destroy" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "‚úÖ Infrastructure destroyed successfully!" >> $GITHUB_STEP_SUMMARY
              echo "üí∞ Resources cleaned up to save costs." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "‚ùå Infrastructure operation failed!" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs for details." >> $GITHUB_STEP_SUMMARY
          fi

  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    needs: [terraform-operation]
    if: always() && needs.terraform-operation.result == 'failure'
    steps:
      - name: Cleanup Failed Resources
        run: |
          echo "Performing cleanup of any partially created resources..."
          echo "This would include cleaning up any resources that were created before the failure."
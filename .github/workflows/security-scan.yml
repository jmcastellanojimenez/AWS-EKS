name: 🔒 Security Scan

on:
  schedule:
    # Run security scan twice weekly
    - cron: '0 6 * * 1,4'
  workflow_dispatch:
    inputs:
      scan_level:
        description: 'Security scan level'
        required: false
        default: 'standard'
        type: choice
        options:
        - quick
        - standard
        - comprehensive
  pull_request:
    paths:
      - 'terraform/**'
      - 'configs/**'
      - '.github/workflows/**'

permissions:
  id-token: write
  contents: read
  security-events: write
  pull-requests: write

jobs:
  infrastructure-security:
    name: 🏗️ Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run TFSec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          soft_fail: true
          format: sarif
          output: tfsec-results.sarif

      - name: Upload TFSec Results to GitHub Security Tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: tfsec-results.sarif

      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true

      - name: Upload Checkov Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Generate Security Report
        run: |
          echo "## 🔒 Infrastructure Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Parse TFSec results
          if [[ -f tfsec-results.sarif ]]; then
            critical=$(cat tfsec-results.sarif | jq '.runs[0].results[] | select(.level == "error") | length' | wc -l)
            high=$(cat tfsec-results.sarif | jq '.runs[0].results[] | select(.level == "warning") | length' | wc -l)
            medium=$(cat tfsec-results.sarif | jq '.runs[0].results[] | select(.level == "note") | length' | wc -l)
            
            echo "### TFSec Results" >> $GITHUB_STEP_SUMMARY
            echo "- 🔴 Critical: $critical" >> $GITHUB_STEP_SUMMARY
            echo "- 🟡 High: $high" >> $GITHUB_STEP_SUMMARY
            echo "- 🔵 Medium: $medium" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Parse Checkov results if available
          if [[ -f checkov-results.sarif ]]; then
            checkov_issues=$(cat checkov-results.sarif | jq '.runs[0].results | length')
            echo "### Checkov Results" >> $GITHUB_STEP_SUMMARY
            echo "- Total Issues: $checkov_issues" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

  kubernetes-security:
    name: ☸️ Kubernetes Security Scan
    runs-on: ubuntu-latest
    if: inputs.scan_level == 'comprehensive' || github.event_name == 'schedule'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-K8sSecurity

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Check for Active Clusters
        id: cluster-check
        run: |
          clusters=$(aws eks list-clusters --query 'clusters' --output json)
          cluster_count=$(echo "$clusters" | jq length)
          
          if [[ $cluster_count -gt 0 ]]; then
            echo "clusters_found=true" >> $GITHUB_OUTPUT
            echo "cluster_names=$clusters" >> $GITHUB_OUTPUT
          else
            echo "clusters_found=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Kubesec
        if: steps.cluster-check.outputs.clusters_found == 'true'
        run: |
          wget https://github.com/controlplaneio/kubesec/releases/latest/download/kubesec_linux_amd64.tar.gz
          tar -xzf kubesec_linux_amd64.tar.gz
          sudo mv kubesec /usr/local/bin/

      - name: Scan Kubernetes Configurations
        if: steps.cluster-check.outputs.clusters_found == 'true'
        run: |
          echo "## ☸️ Kubernetes Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Scan YAML files in configs directory
          find configs/ -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Scanning $file"
            result=$(kubesec scan "$file" 2>/dev/null || echo '[]')
            score=$(echo "$result" | jq -r '.[0].score // "N/A"')
            echo "- **$file**: Score $score" >> $GITHUB_STEP_SUMMARY
          done

      - name: Run Kube-hunter (if clusters exist)
        if: steps.cluster-check.outputs.clusters_found == 'true'
        run: |
          # Get first cluster for testing
          first_cluster=$(echo '${{ steps.cluster-check.outputs.cluster_names }}' | jq -r '.[0]')
          
          if [[ "$first_cluster" != "null" ]]; then
            # Update kubeconfig
            aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name "$first_cluster"
            
            # Run basic cluster security check
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Cluster Security Status" >> $GITHUB_STEP_SUMMARY
            
            # Check RBAC
            if kubectl auth can-i --list --as=system:anonymous 2>/dev/null | grep -q "No resources found"; then
              echo "- ✅ Anonymous access properly restricted" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ⚠️ Anonymous access may be too permissive" >> $GITHUB_STEP_SUMMARY
            fi
            
            # Check for privileged pods
            privileged_pods=$(kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{"\t"}{.metadata.name}{"\t"}{.spec.securityContext.privileged}{"\n"}' | grep true | wc -l)
            echo "- Privileged pods found: $privileged_pods" >> $GITHUB_STEP_SUMMARY
            
            # Check for pods running as root
            root_pods=$(kubectl get pods --all-namespaces -o jsonpath='{range .items[*]}{.metadata.namespace}{"\t"}{.metadata.name}{"\t"}{.spec.securityContext.runAsUser}{"\n"}' | grep -E "^.*\t.*\t0$" | wc -l)
            echo "- Pods running as root: $root_pods" >> $GITHUB_STEP_SUMMARY
          fi

  container-security:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    if: inputs.scan_level == 'comprehensive' || github.event_name == 'schedule'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

  policy-compliance:
    name: 📋 Policy Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install OPA
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/v0.57.0/opa_linux_amd64_static
          chmod 755 ./opa
          sudo mv opa /usr/local/bin

      - name: Create Security Policies
        run: |
          mkdir -p policies
          
          cat > policies/security.rego << 'EOF'
          package kubernetes.security
          
          # Deny containers running as root
          violation[{"msg": msg}] {
            input.kind == "Pod"
            input.spec.securityContext.runAsUser == 0
            msg := "Containers should not run as root user"
          }
          
          # Require resource limits
          violation[{"msg": msg}] {
            input.kind == "Pod"
            container := input.spec.containers[_]
            not container.resources.limits
            msg := sprintf("Container %v missing resource limits", [container.name])
          }
          
          # Require security context
          violation[{"msg": msg}] {
            input.kind == "Pod"
            container := input.spec.containers[_]
            not container.securityContext
            msg := sprintf("Container %v missing security context", [container.name])
          }
          EOF

      - name: Validate Configurations Against Policies
        run: |
          echo "## 📋 Policy Compliance Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          violation_count=0
          
          find configs/ -name "*.yaml" -o -name "*.yml" | while read file; do
            echo "Checking $file against security policies..."
            violations=$(opa eval -d policies/ -I "$file" "data.kubernetes.security.violation[x]" 2>/dev/null || echo "[]")
            
            if [[ "$violations" != "[]" ]]; then
              echo "- ❌ **$file**: Policy violations found" >> $GITHUB_STEP_SUMMARY
              violation_count=$((violation_count + 1))
            else
              echo "- ✅ **$file**: Compliant" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          if [[ $violation_count -eq 0 ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🎉 All configurations are policy compliant!" >> $GITHUB_STEP_SUMMARY
          fi

  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [infrastructure-security, kubernetes-security, container-security, policy-compliance]
    if: always()
    steps:
      - name: Generate Security Summary
        run: |
          echo "## 🔒 Complete Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Level**: ${{ inputs.scan_level || 'scheduled' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure | ${{ needs.infrastructure-security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Kubernetes | ${{ needs.kubernetes-security.result == 'success' && '✅ Passed' || needs.kubernetes-security.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Containers | ${{ needs.container-security.result == 'success' && '✅ Passed' || needs.container-security.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Policy Compliance | ${{ needs.policy-compliance.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🛡️ Security Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- Review all security findings in the Security tab" >> $GITHUB_STEP_SUMMARY
          echo "- Address critical and high-severity issues promptly" >> $GITHUB_STEP_SUMMARY
          echo "- Implement network policies for pod-to-pod communication" >> $GITHUB_STEP_SUMMARY
          echo "- Use Pod Security Standards for additional security" >> $GITHUB_STEP_SUMMARY
          echo "- Regular security scanning should be part of CI/CD pipeline" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Next scan scheduled: $(date -d '+3 days' +%Y-%m-%d)*" >> $GITHUB_STEP_SUMMARY
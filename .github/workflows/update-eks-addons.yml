name: 🔧 Update EKS Add-ons

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging  
        - prod
      addons_to_update:
        description: 'Add-ons to Update'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - vpc-cni
        - coredns
        - kube-proxy
        - aws-ebs-csi-driver
      update_mode:
        description: 'Update Mode'
        required: true
        default: 'check-only'
        type: choice
        options:
        - check-only
        - update-with-approval
        - force-update
      preserve_settings:
        description: 'Preserve current add-on settings'
        required: false
        default: true
        type: boolean
      backup_before_update:
        description: 'Backup add-on configurations before update'
        required: false
        default: true
        type: boolean

permissions:
  id-token: write
  contents: read

env:
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
  CLUSTER_NAME: eks-learning-lab-${{ github.event.inputs.environment }}

jobs:
  validate-cluster:
    name: 🔍 Validate EKS Cluster
    runs-on: ubuntu-latest
    outputs:
      cluster-exists: ${{ steps.check-cluster.outputs.exists }}
      cluster-status: ${{ steps.check-cluster.outputs.status }}
      cluster-version: ${{ steps.check-cluster.outputs.version }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-EKSAddonsCheck

      - name: Check EKS Cluster
        id: check-cluster
        run: |
          echo "🔍 Checking EKS cluster: $CLUSTER_NAME"
          
          if aws eks describe-cluster --name "$CLUSTER_NAME" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            
            # Get cluster status and version
            STATUS=$(aws eks describe-cluster --name "$CLUSTER_NAME" --query 'cluster.status' --output text)
            VERSION=$(aws eks describe-cluster --name "$CLUSTER_NAME" --query 'cluster.version' --output text)
            
            echo "status=$STATUS" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            
            echo "✅ Cluster found - Status: $STATUS, Version: $VERSION"
            
            if [[ "$STATUS" != "ACTIVE" ]]; then
              echo "❌ Cluster is not in ACTIVE state. Current status: $STATUS"
              exit 1
            fi
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "❌ EKS cluster '$CLUSTER_NAME' not found"
            exit 1
          fi

  check-addons-status:
    name: 📊 Check Add-ons Status
    runs-on: ubuntu-latest
    needs: validate-cluster
    if: needs.validate-cluster.outputs.cluster-exists == 'true'
    outputs:
      vpc-cni-update-available: ${{ steps.check-addons.outputs.vpc-cni-update-available }}
      coredns-update-available: ${{ steps.check-addons.outputs.coredns-update-available }}
      kube-proxy-update-available: ${{ steps.check-addons.outputs.kube-proxy-update-available }}
      aws-ebs-csi-driver-update-available: ${{ steps.check-addons.outputs.aws-ebs-csi-driver-update-available }}
      updates-summary: ${{ steps.check-addons.outputs.updates-summary }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-EKSAddonsStatus

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name "$CLUSTER_NAME"
          kubectl cluster-info

      - name: Check Add-ons Status
        id: check-addons
        run: |
          echo "📊 Checking current add-ons and available updates..."
          echo "" 
          
          # Define the add-ons to check
          ADDONS=(
            "vpc-cni"
            "coredns" 
            "kube-proxy"
            "aws-ebs-csi-driver"
          )
          
          updates_available=0
          updates_summary=""
          
          for addon in "${ADDONS[@]}"; do
            echo "🔍 Checking addon: $addon"
            
            # Check if addon exists
            if aws eks describe-addon --cluster-name "$CLUSTER_NAME" --addon-name "$addon" >/dev/null 2>&1; then
              # Get current version
              current_version=$(aws eks describe-addon --cluster-name "$CLUSTER_NAME" --addon-name "$addon" --query 'addon.addonVersion' --output text)
              
              # Get latest available version
              latest_version=$(aws eks describe-addon-versions \
                --addon-name "$addon" \
                --kubernetes-version "${{ needs.validate-cluster.outputs.cluster-version }}" \
                --query 'addons[0].addonVersions[0].addonVersion' \
                --output text)
              
              echo "  Current: $current_version"
              echo "  Latest:  $latest_version"
              
              if [[ "$current_version" != "$latest_version" ]]; then
                echo "  Status: ⚠️ UPDATE AVAILABLE"
                echo "${addon}-update-available=true" >> $GITHUB_OUTPUT
                updates_available=$((updates_available + 1))
                updates_summary="${updates_summary}- **$addon**: $current_version → $latest_version\n"
              else
                echo "  Status: ✅ UP TO DATE"
                echo "${addon}-update-available=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "  Status: ❌ NOT INSTALLED"
              echo "${addon}-update-available=false" >> $GITHUB_OUTPUT
            fi
            echo ""
          done
          
          echo "updates-summary<<EOF" >> $GITHUB_OUTPUT
          echo -e "$updates_summary" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "## 📊 EKS Add-ons Status Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Cluster**: $CLUSTER_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**Kubernetes Version**: ${{ needs.validate-cluster.outputs.cluster-version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Updates Available**: $updates_available" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ $updates_available -gt 0 ]]; then
            echo "### 🔄 Available Updates" >> $GITHUB_STEP_SUMMARY
            echo -e "$updates_summary" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ✅ All Add-ons Up to Date" >> $GITHUB_STEP_SUMMARY
            echo "No updates are currently available." >> $GITHUB_STEP_SUMMARY
          fi

  backup-addon-configs:
    name: 💾 Backup Add-on Configurations
    runs-on: ubuntu-latest
    needs: [validate-cluster, check-addons-status]
    if: github.event.inputs.backup_before_update == 'true' && github.event.inputs.update_mode != 'check-only'
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-EKSAddonsBackup

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name "$CLUSTER_NAME"

      - name: Backup Add-on Configurations
        run: |
          echo "💾 Creating backup of add-on configurations..."
          mkdir -p addon-backups
          
          ADDONS=("vpc-cni" "coredns" "kube-proxy" "aws-ebs-csi-driver")
          
          for addon in "${ADDONS[@]}"; do
            echo "📋 Backing up $addon configuration..."
            
            # Backup addon configuration from AWS
            if aws eks describe-addon --cluster-name "$CLUSTER_NAME" --addon-name "$addon" >/dev/null 2>&1; then
              aws eks describe-addon --cluster-name "$CLUSTER_NAME" --addon-name "$addon" > "addon-backups/${addon}-aws-config.json"
              echo "✅ AWS config backed up for $addon"
            fi
            
            # Backup Kubernetes resources based on addon type
            case $addon in
              "vpc-cni")
                kubectl get daemonset aws-node -n kube-system -o yaml > "addon-backups/vpc-cni-daemonset.yaml" 2>/dev/null || true
                kubectl get configmap amazon-vpc-cni -n kube-system -o yaml > "addon-backups/vpc-cni-configmap.yaml" 2>/dev/null || true
                ;;
              "coredns")
                kubectl get deployment coredns -n kube-system -o yaml > "addon-backups/coredns-deployment.yaml" 2>/dev/null || true
                kubectl get configmap coredns -n kube-system -o yaml > "addon-backups/coredns-configmap.yaml" 2>/dev/null || true
                ;;
              "kube-proxy")
                kubectl get daemonset kube-proxy -n kube-system -o yaml > "addon-backups/kube-proxy-daemonset.yaml" 2>/dev/null || true
                kubectl get configmap kube-proxy-config -n kube-system -o yaml > "addon-backups/kube-proxy-configmap.yaml" 2>/dev/null || true
                ;;
              "aws-ebs-csi-driver")
                kubectl get deployment ebs-csi-controller -n kube-system -o yaml > "addon-backups/ebs-csi-controller.yaml" 2>/dev/null || true
                kubectl get daemonset ebs-csi-node -n kube-system -o yaml > "addon-backups/ebs-csi-node.yaml" 2>/dev/null || true
                ;;
            esac
          done
          
          echo "📦 Backup completed. Files created:"
          ls -la addon-backups/

      - name: Upload Backup Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: eks-addon-backups-${{ github.event.inputs.environment }}-${{ github.run_number }}
          path: addon-backups/
          retention-days: 30

  update-addons:
    name: 🔄 Update EKS Add-ons
    runs-on: ubuntu-latest
    needs: [validate-cluster, check-addons-status, backup-addon-configs]
    if: github.event.inputs.update_mode != 'check-only' && always()
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-EKSAddonsUpdate

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name "$CLUSTER_NAME"

      - name: Update Add-ons
        run: |
          echo "🔄 Starting add-on updates..."
          
          # Determine which addons to update
          if [[ "${{ github.event.inputs.addons_to_update }}" == "all" ]]; then
            ADDONS_TO_UPDATE=("vpc-cni" "coredns" "kube-proxy" "aws-ebs-csi-driver")
          else
            ADDONS_TO_UPDATE=("${{ github.event.inputs.addons_to_update }}")
          fi
          
          # Update configuration options
          if [[ "${{ github.event.inputs.preserve_settings }}" == "true" ]]; then
            RESOLVE_CONFLICTS="PRESERVE"
          else
            RESOLVE_CONFLICTS="OVERWRITE"
          fi
          
          for addon in "${ADDONS_TO_UPDATE[@]}"; do
            echo "🔍 Processing addon: $addon"
            
            # Check if update is available for this addon
            case $addon in
              "vpc-cni")
                update_available="${{ needs.check-addons-status.outputs.vpc-cni-update-available }}"
                ;;
              "coredns")
                update_available="${{ needs.check-addons-status.outputs.coredns-update-available }}"
                ;;
              "kube-proxy")
                update_available="${{ needs.check-addons-status.outputs.kube-proxy-update-available }}"
                ;;
              "aws-ebs-csi-driver")
                update_available="${{ needs.check-addons-status.outputs.aws-ebs-csi-driver-update-available }}"
                ;;
            esac
            
            if [[ "$update_available" == "true" || "${{ github.event.inputs.update_mode }}" == "force-update" ]]; then
              echo "🔄 Updating $addon..."
              
              # Get the latest version
              latest_version=$(aws eks describe-addon-versions \
                --addon-name "$addon" \
                --kubernetes-version "${{ needs.validate-cluster.outputs.cluster-version }}" \
                --query 'addons[0].addonVersions[0].addonVersion' \
                --output text)
              
              echo "  Target version: $latest_version"
              
              # Perform the update
              if aws eks update-addon \
                --cluster-name "$CLUSTER_NAME" \
                --addon-name "$addon" \
                --addon-version "$latest_version" \
                --resolve-conflicts "$RESOLVE_CONFLICTS"; then
                
                echo "✅ Update initiated for $addon"
                
                # Wait for update to complete (with timeout)
                echo "⏳ Waiting for $addon update to complete..."
                for i in {1..30}; do
                  status=$(aws eks describe-addon --cluster-name "$CLUSTER_NAME" --addon-name "$addon" --query 'addon.status' --output text)
                  
                  if [[ "$status" == "ACTIVE" ]]; then
                    echo "✅ $addon update completed successfully"
                    break
                  elif [[ "$status" == "UPDATE_FAILED" ]]; then
                    echo "❌ $addon update failed"
                    aws eks describe-addon --cluster-name "$CLUSTER_NAME" --addon-name "$addon" --query 'addon.health'
                    break
                  else
                    echo "  Status: $status (attempt $i/30)"
                    sleep 30
                  fi
                done
              else
                echo "❌ Failed to initiate update for $addon"
              fi
            else
              echo "ℹ️ No update available for $addon, skipping"
            fi
            echo ""
          done

      - name: Verify Cluster Health
        run: |
          echo "🏥 Verifying cluster health after updates..."
          
          # Check node status
          echo "📊 Node Status:"
          kubectl get nodes
          
          # Check system pods
          echo "📊 System Pods Status:"
          kubectl get pods -n kube-system | grep -E "(coredns|aws-node|kube-proxy|ebs-csi)"
          
          # Check addon status in AWS
          echo "📊 Add-on Status in AWS:"
          ADDONS=("vpc-cni" "coredns" "kube-proxy" "aws-ebs-csi-driver")
          
          for addon in "${ADDONS[@]}"; do
            if aws eks describe-addon --cluster-name "$CLUSTER_NAME" --addon-name "$addon" >/dev/null 2>&1; then
              status=$(aws eks describe-addon --cluster-name "$CLUSTER_NAME" --addon-name "$addon" --query 'addon.status' --output text)
              version=$(aws eks describe-addon --cluster-name "$CLUSTER_NAME" --addon-name "$addon" --query 'addon.addonVersion' --output text)
              echo "  $addon: $status (v$version)"
            fi
          done

  notify-completion:
    name: 📢 Notify Update Completion
    runs-on: ubuntu-latest
    needs: [validate-cluster, check-addons-status, update-addons]
    if: always()
    steps:
      - name: Send Slack Notification
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          # Determine overall status
          update_status="${{ needs.update-addons.result }}"
          
          if [[ "${{ github.event.inputs.update_mode }}" == "check-only" ]]; then
            title="📊 EKS Add-ons Status Check"
            color="good"
            emoji="📊"
          elif [[ "$update_status" == "success" ]]; then
            title="✅ EKS Add-ons Updated Successfully"
            color="good"  
            emoji="✅"
          elif [[ "$update_status" == "failure" ]]; then
            title="❌ EKS Add-ons Update Failed"
            color="danger"
            emoji="❌"
          else
            title="⚠️ EKS Add-ons Update Status Unknown"
            color="warning"
            emoji="⚠️"
          fi

          payload=$(cat <<EOF
          {
            "attachments": [
              {
                "color": "$color",
                "title": "$emoji $title",
                "fields": [
                  {
                    "title": "Cluster",
                    "value": "$CLUSTER_NAME",
                    "short": true
                  },
                  {
                    "title": "Environment", 
                    "value": "${{ github.event.inputs.environment }}",
                    "short": true
                  },
                  {
                    "title": "Mode",
                    "value": "${{ github.event.inputs.update_mode }}",
                    "short": true
                  },
                  {
                    "title": "Add-ons Scope",
                    "value": "${{ github.event.inputs.addons_to_update }}",
                    "short": true
                  }
                ],
                "footer": "GitHub Actions - EKS Add-ons",
                "ts": $(date +%s)
              }
            ]
          }
          EOF
          )

          curl -X POST -H 'Content-type: application/json' \
            --data "$payload" \
            "$SLACK_WEBHOOK_URL"

      - name: Generate Update Summary
        run: |
          echo "## 🔧 EKS Add-ons Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Cluster**: $CLUSTER_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Mode**: ${{ github.event.inputs.update_mode }}" >> $GITHUB_STEP_SUMMARY
          echo "**Scope**: ${{ github.event.inputs.addons_to_update }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ github.event.inputs.update_mode }}" == "check-only" ]]; then
            echo "### 📊 Status Check Results" >> $GITHUB_STEP_SUMMARY
            echo "Check completed - see add-on status job for details" >> $GITHUB_STEP_SUMMARY
          else
            if [[ "${{ needs.update-addons.result }}" == "success" ]]; then
              echo "### ✅ Updates Completed Successfully" >> $GITHUB_STEP_SUMMARY
              echo "All selected add-ons have been updated successfully." >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ needs.update-addons.result }}" == "failure" ]]; then
              echo "### ❌ Update Failed" >> $GITHUB_STEP_SUMMARY
              echo "Some add-on updates failed. Check the logs for details." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Recovery Options:**" >> $GITHUB_STEP_SUMMARY
              echo "- Check backup artifacts if restoration is needed" >> $GITHUB_STEP_SUMMARY
              echo "- Review cluster health and pod status" >> $GITHUB_STEP_SUMMARY
              echo "- Contact support if critical services are affected" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          if [[ "${{ github.event.inputs.backup_before_update }}" == "true" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**💾 Backup**: Configuration backups available as workflow artifacts" >> $GITHUB_STEP_SUMMARY
          fi
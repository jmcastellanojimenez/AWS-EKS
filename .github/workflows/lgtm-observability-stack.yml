name: 📈 LGTM Observability Stack

# MANUAL EXECUTION ONLY - No automatic triggers on push/PR
on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Infrastructure Action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply  
        - destroy
      environment:
        description: 'Target Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      confirm_destroy:
        description: 'For DESTROY: type CONFIRM-DESTROY'
        required: false
        type: string
      auto_approve:
        description: 'Auto-approve apply (use with caution)'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read

env:
  TF_VERSION: '1.6.0'
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

jobs:
  validate-inputs:
    name: 🔍 Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      action: ${{ steps.validate.outputs.action }}
      environment: ${{ steps.validate.outputs.environment }}
      should-proceed: ${{ steps.validate.outputs.should-proceed }}
    steps:
      - name: Validate Inputs
        id: validate
        run: |
          echo "action=${{ inputs.action }}" >> $GITHUB_OUTPUT
          echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          
          # Validate destroy confirmation
          if [[ "${{ inputs.action }}" == "destroy" ]]; then
            if [[ "${{ inputs.confirm_destroy }}" != "CONFIRM-DESTROY" ]]; then
              echo "❌ Destroy action requires 'CONFIRM-DESTROY' confirmation"
              echo "should-proceed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            echo "✅ Destroy confirmation validated"
          fi
          
          echo "should-proceed=true" >> $GITHUB_OUTPUT

  check-foundation:
    name: 🔍 Check Foundation Platform
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: needs.validate-inputs.outputs.should-proceed == 'true'
    outputs:
      foundation-ready: ${{ steps.check.outputs.foundation-ready }}
      ingress-ready: ${{ steps.check.outputs.ingress-ready }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-CheckFoundation

      - name: 🏗️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: 🔍 Check Foundation Infrastructure
        id: check
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: |
          terraform init -backend-config="bucket=eks-learning-lab-terraform-state-${{ secrets.AWS_ACCOUNT_ID }}"
          
          # Check if EKS cluster exists in state
          if terraform state list | grep -q "module.eks.aws_eks_cluster"; then
            cluster_name=$(terraform output -raw cluster_name 2>/dev/null || echo "")
            if [[ -n "$cluster_name" ]]; then
              echo "✅ Foundation Platform found: $cluster_name"
              echo "foundation-ready=true" >> $GITHUB_OUTPUT
              
              # Check if Ingress stack is deployed (Ambassador service)
              if terraform state list | grep -q "module.ambassador"; then
                echo "✅ Ingress + API Gateway Stack found"
                echo "ingress-ready=true" >> $GITHUB_OUTPUT
              else
                echo "⚠️  Ingress + API Gateway Stack not found. Observability will work without it."
                echo "ingress-ready=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "❌ Foundation Platform cluster name not found"
              echo "foundation-ready=false" >> $GITHUB_OUTPUT
              echo "ingress-ready=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          else
            echo "❌ Foundation Platform not deployed. Deploy Workflow 1 first."
            echo "foundation-ready=false" >> $GITHUB_OUTPUT
            echo "ingress-ready=false" >> $GITHUB_OUTPUT
            exit 1
          fi

  terraform-operation:
    name: 📈 Deploy LGTM Observability Stack
    runs-on: ubuntu-latest
    needs: [validate-inputs, check-foundation]
    if: needs.validate-inputs.outputs.should-proceed == 'true' && needs.check-foundation.outputs.foundation-ready == 'true'
    environment: ${{ needs.validate-inputs.outputs.environment }}
    outputs:
      observability-ready: ${{ steps.output.outputs.observability-ready }}
      grafana-endpoint: ${{ steps.output.outputs.grafana-endpoint }}
      prometheus-endpoint: ${{ steps.output.outputs.prometheus-endpoint }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-LGTMStack

      - name: 🏗️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: 📋 Terraform Init
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: |
          terraform init -backend-config="bucket=eks-learning-lab-terraform-state-${{ secrets.AWS_ACCOUNT_ID }}"

      - name: ✅ Terraform Validate
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: terraform validate

      - name: 📊 Terraform Plan
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: |
          if [[ "${{ needs.validate-inputs.outputs.action }}" == "destroy" ]]; then
            terraform plan -destroy -out=tfplan -target=module.lgtm_observability
          else
            terraform plan -out=tfplan -target=module.lgtm_observability
          fi

      - name: 🚀 Terraform Apply
        if: needs.validate-inputs.outputs.action == 'apply'
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: |
          if [[ "${{ inputs.auto_approve }}" == "true" ]]; then
            terraform apply tfplan
          else
            echo "❌ Manual approval required. Set auto_approve=true to proceed."
            exit 1
          fi

      - name: 🗑️ Terraform Destroy
        if: needs.validate-inputs.outputs.action == 'destroy'
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        timeout-minutes: 45
        run: terraform apply tfplan

      - name: 📤 Get Observability Information
        id: output
        if: needs.validate-inputs.outputs.action == 'apply'
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: |
          # Get observability stack information
          observability_ready=$(terraform output -raw observability_ready 2>/dev/null || echo "false")
          grafana_endpoint=$(terraform output -raw grafana_endpoint 2>/dev/null || echo "")
          prometheus_endpoint=$(terraform output -raw prometheus_endpoint 2>/dev/null || echo "")
          
          echo "observability-ready=$observability_ready" >> $GITHUB_OUTPUT
          echo "grafana-endpoint=$grafana_endpoint" >> $GITHUB_OUTPUT
          echo "prometheus-endpoint=$prometheus_endpoint" >> $GITHUB_OUTPUT
          
          echo "✅ LGTM Observability Stack deployed successfully!"
          echo "📈 Grafana: $grafana_endpoint"
          echo "📊 Prometheus: $prometheus_endpoint"

      - name: 🔧 Configure kubectl and Verify Stack
        if: needs.validate-inputs.outputs.action == 'apply'
        run: |
          cluster_name=$(cd terraform/environments/${{ needs.validate-inputs.outputs.environment }} && terraform output -raw cluster_name)
          if [[ -n "$cluster_name" ]]; then
            aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name "$cluster_name"
            
            echo "🔍 Verifying LGTM Observability Stack..."
            
            # Wait a bit for pods to start
            sleep 30
            
            # Check namespace
            echo "📂 Checking observability namespace..."
            kubectl get namespace observability
            
            # Check Prometheus
            echo "📊 Checking Prometheus..."
            kubectl get pods -n observability -l app=prometheus-server
            kubectl get svc -n observability prometheus-server
            
            # Check Grafana
            echo "📈 Checking Grafana..."
            kubectl get pods -n observability -l app.kubernetes.io/name=grafana
            kubectl get svc -n observability grafana
            
            # Check Loki (if enabled)
            echo "📝 Checking Loki..."
            kubectl get pods -n observability -l app=loki || echo "Loki not enabled or not ready yet"
            
            # Check Tempo (if enabled)
            echo "🔍 Checking Tempo..."
            kubectl get pods -n observability -l app.kubernetes.io/name=tempo || echo "Tempo not enabled or not ready yet"
            
            # Check Mimir (if enabled)
            echo "💾 Checking Mimir..."
            kubectl get pods -n observability -l app.kubernetes.io/name=mimir || echo "Mimir not enabled or not ready yet"
            
            # Check service accounts
            echo "🔐 Checking service accounts..."
            kubectl get serviceaccounts -n observability
            
            # Check S3 buckets
            echo "☁️  Checking S3 buckets..."
            aws s3 ls | grep lgtm || echo "LGTM buckets not created yet"
            
            echo "✅ Stack verification completed!"
          fi

  summary:
    name: 📋 Deployment Summary
    runs-on: ubuntu-latest
    needs: [validate-inputs, check-foundation, terraform-operation]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "## 📈 LGTM Observability Stack Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action**: ${{ needs.validate-inputs.outputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ needs.validate-inputs.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Foundation Check**: ${{ needs.check-foundation.outputs.foundation-ready }}" >> $GITHUB_STEP_SUMMARY
          echo "**Ingress Stack**: ${{ needs.check-foundation.outputs.ingress-ready }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ needs.terraform-operation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.check-foundation.outputs.foundation-ready }}" != "true" ]]; then
            echo "### ❌ Foundation Platform Required" >> $GITHUB_STEP_SUMMARY
            echo "Deploy **🏗️ Workflow 1: Foundation Platform** first before running this workflow." >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.terraform-operation.result }}" == "success" ]]; then
            if [[ "${{ needs.validate-inputs.outputs.action }}" == "apply" ]]; then
              echo "### ✅ LGTM Observability Stack Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Components Deployed:**" >> $GITHUB_STEP_SUMMARY
              echo "- 📊 **Prometheus**: Metrics collection and alerting" >> $GITHUB_STEP_SUMMARY
              echo "- 📈 **Grafana**: Unified dashboards and visualization" >> $GITHUB_STEP_SUMMARY
              echo "- 📝 **Loki**: Log aggregation with S3 storage" >> $GITHUB_STEP_SUMMARY
              echo "- 🔍 **Tempo**: Distributed tracing" >> $GITHUB_STEP_SUMMARY
              echo "- 💾 **Mimir**: Long-term metrics storage" >> $GITHUB_STEP_SUMMARY
              echo "- ☁️  **S3 Storage**: Unlimited data retention with lifecycle policies" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Resource Allocation (per t3.large node):**" >> $GITHUB_STEP_SUMMARY
              echo "- Prometheus: ~400m CPU, ~1024Mi memory" >> $GITHUB_STEP_SUMMARY
              echo "- Grafana: ~100m CPU, ~256Mi memory" >> $GITHUB_STEP_SUMMARY
              echo "- Loki: ~200m CPU, ~512Mi memory" >> $GITHUB_STEP_SUMMARY
              echo "- Tempo: ~150m CPU, ~256Mi memory" >> $GITHUB_STEP_SUMMARY
              echo "- Mimir: ~300m CPU, ~512Mi memory" >> $GITHUB_STEP_SUMMARY
              echo "- **Total**: ~1.15 CPU cores, ~2.5Gi memory" >> $GITHUB_STEP_SUMMARY
              echo "- **Remaining**: ~1.65 CPU cores, ~0.5Gi memory for future workflows" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Access Instructions:**" >> $GITHUB_STEP_SUMMARY
              echo "1. Get Grafana password: \\`kubectl get secret -n observability grafana-credentials -o jsonpath='{.data.admin-password}' | base64 -d\\`" >> $GITHUB_STEP_SUMMARY
              echo "2. Port-forward to Grafana: \\`kubectl port-forward -n observability svc/grafana 3000:80\\`" >> $GITHUB_STEP_SUMMARY
              echo "3. Access Grafana: http://localhost:3000 (admin/\\<password\\>)" >> $GITHUB_STEP_SUMMARY
              echo "4. Verify S3 storage: \\`aws s3 ls | grep lgtm\\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Pre-configured Dashboards:**" >> $GITHUB_STEP_SUMMARY
              echo "- Kubernetes Cluster Monitoring" >> $GITHUB_STEP_SUMMARY
              echo "- Kubernetes Pods Monitoring" >> $GITHUB_STEP_SUMMARY
              echo "- Spring Boot Applications (for EcoTrack microservices)" >> $GITHUB_STEP_SUMMARY
              echo "- Ambassador API Gateway (if Workflow 2 deployed)" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
              echo "1. Configure EcoTrack microservices with prometheus.io/scrape annotations" >> $GITHUB_STEP_SUMMARY
              echo "2. Add OpenTelemetry instrumentation for distributed tracing" >> $GITHUB_STEP_SUMMARY
              echo "3. Set up Grafana alerts for critical metrics" >> $GITHUB_STEP_SUMMARY
              echo "4. Ready for Workflows 4-7: GitOps, Security, Istio, Data services" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ needs.validate-inputs.outputs.action }}" == "destroy" ]]; then
              echo "### ✅ LGTM Observability Stack Destroyed Successfully!" >> $GITHUB_STEP_SUMMARY
              echo "💰 All observability components and S3 storage have been cleaned up to save costs." >> $GITHUB_STEP_SUMMARY
              echo "🏗️  Foundation Platform and Ingress Stack remain intact." >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ needs.validate-inputs.outputs.action }}" == "plan" ]]; then
              echo "### 📊 Plan Generated Successfully!" >> $GITHUB_STEP_SUMMARY
              echo "Review the plan output above before proceeding with apply." >> $GITHUB_STEP_SUMMARY
              echo "The LGTM stack will deploy complete observability infrastructure:" >> $GITHUB_STEP_SUMMARY
              echo "- Metrics: Prometheus → Mimir → S3" >> $GITHUB_STEP_SUMMARY
              echo "- Logs: Promtail → Loki → S3" >> $GITHUB_STEP_SUMMARY
              echo "- Traces: OpenTelemetry → Tempo → S3" >> $GITHUB_STEP_SUMMARY
              echo "- Dashboards: Grafana with pre-configured data sources" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ❌ Operation Failed!" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
          fi
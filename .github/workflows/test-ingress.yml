name: üß™ Test Kubernetes Ingress

on:
  workflow_run:
    workflows: ["üöÄ Deploy Kubernetes Ingress Patterns"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      ingress_pattern:
        description: 'Ingress Pattern to Test'
        required: true
        default: 'alb'
        type: choice
        options:
        - alb
        - nginx
      environment:
        description: 'Target Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      domain_name:
        description: 'Domain Name (e.g., k8s-demo.local)'
        required: false
        type: string
      load_balancer_hostname:
        description: 'LoadBalancer Hostname'
        required: false
        type: string

permissions:
  id-token: write
  contents: read

env:
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

jobs:
  determine-test-parameters:
    name: üéØ Determine Test Parameters
    runs-on: ubuntu-latest
    outputs:
      pattern: ${{ steps.params.outputs.pattern }}
      environment: ${{ steps.params.outputs.environment }}
      domain-name: ${{ steps.params.outputs.domain-name }}
      load-balancer-hostname: ${{ steps.params.outputs.load-balancer-hostname }}
      should-run: ${{ steps.params.outputs.should-run }}
    steps:
      - name: Set Test Parameters
        id: params
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Manual trigger
            echo "pattern=${{ inputs.ingress_pattern }}" >> $GITHUB_OUTPUT
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            echo "domain-name=${{ inputs.domain_name || 'k8s-demo.local' }}" >> $GITHUB_OUTPUT
            echo "load-balancer-hostname=${{ inputs.load_balancer_hostname }}" >> $GITHUB_OUTPUT
            echo "should-run=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            # Triggered by successful deployment
            echo "pattern=alb" >> $GITHUB_OUTPUT  # Default for auto-trigger
            echo "environment=dev" >> $GITHUB_OUTPUT  # Default for auto-trigger  
            echo "domain-name=k8s-demo.local" >> $GITHUB_OUTPUT
            echo "load-balancer-hostname=" >> $GITHUB_OUTPUT  # Will be discovered
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi
          
          echo "## üß™ Ingress Testing Parameters" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pattern**: $pattern" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: $environment" >> $GITHUB_STEP_SUMMARY
          echo "**Domain**: $domain_name" >> $GITHUB_STEP_SUMMARY

  discover-resources:
    name: üîç Discover Kubernetes Resources
    runs-on: ubuntu-latest
    needs: determine-test-parameters
    if: needs.determine-test-parameters.outputs.should-run == 'true'
    outputs:
      load-balancer-hostname: ${{ steps.discover.outputs.load-balancer-hostname }}
      ingress-hostname: ${{ steps.discover.outputs.ingress-hostname }}
      certificate-ready: ${{ steps.discover.outputs.certificate-ready }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-IngressTest

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig \
            --region ${{ secrets.AWS_REGION }} \
            --name eks-learning-lab-${{ needs.determine-test-parameters.outputs.environment }}

      - name: Discover Resources
        id: discover
        run: |
          pattern="${{ needs.determine-test-parameters.outputs.pattern }}"
          
          echo "üîç Discovering resources for pattern: $pattern"
          
          # Get LoadBalancer hostname
          if [[ "$pattern" == "alb" ]]; then
            echo "üìã Looking for ALB ingress..."
            ingress_hostname=$(kubectl get ingress -o jsonpath='{.items[0].status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
            lb_hostname="$ingress_hostname"
            ingress_name=$(kubectl get ingress -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
          else
            echo "üìã Looking for NGINX service..."
            lb_hostname=$(kubectl get service ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || echo "")
            ingress_hostname=$(kubectl get ingress -o jsonpath='{.items[0].spec.rules[0].host}' 2>/dev/null || echo "")
            ingress_name=$(kubectl get ingress -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "")
          fi
          
          # Use provided hostname if available
          if [[ -n "${{ needs.determine-test-parameters.outputs.load-balancer-hostname }}" ]]; then
            lb_hostname="${{ needs.determine-test-parameters.outputs.load-balancer-hostname }}"
          fi
          
          echo "load-balancer-hostname=$lb_hostname" >> $GITHUB_OUTPUT
          echo "ingress-hostname=$ingress_hostname" >> $GITHUB_OUTPUT
          
          echo "üåê LoadBalancer Hostname: $lb_hostname"
          echo "üåê Ingress Hostname: $ingress_hostname" 
          echo "üìã Ingress Name: $ingress_name"
          
          # Check certificate status
          cert_ready="false"
          if [[ -n "$ingress_name" ]]; then
            cert_status=$(kubectl get certificate -o jsonpath='{.items[0].status.conditions[?(@.type=="Ready")].status}' 2>/dev/null || echo "False")
            if [[ "$cert_status" == "True" ]]; then
              cert_ready="true"
            fi
          fi
          
          echo "certificate-ready=$cert_ready" >> $GITHUB_OUTPUT
          echo "üîí Certificate Ready: $cert_ready"

  test-dns-resolution:
    name: üåê Test DNS Resolution
    runs-on: ubuntu-latest
    needs: [determine-test-parameters, discover-resources]
    if: needs.determine-test-parameters.outputs.should-run == 'true'
    outputs:
      dns-test-result: ${{ steps.dns-test.outputs.result }}
    steps:
      - name: Test DNS Resolution
        id: dns-test
        run: |
          domain="${{ needs.determine-test-parameters.outputs.domain-name }}"
          lb_hostname="${{ needs.discover-resources.outputs.load-balancer-hostname }}"
          ingress_hostname="${{ needs.discover-resources.outputs.ingress-hostname }}"
          
          echo "üåê Testing DNS resolution for domain: $domain"
          
          result="success"
          
          # Test hosted zone exists
          if ! nslookup "$domain" >/dev/null 2>&1; then
            echo "‚ùå Domain $domain does not resolve"
            result="failure"
          else
            echo "‚úÖ Domain $domain resolves successfully"
          fi
          
          # Test ingress hostname if available
          if [[ -n "$ingress_hostname" ]]; then
            echo "üîç Testing ingress hostname: $ingress_hostname"
            if ! nslookup "$ingress_hostname" >/dev/null 2>&1; then
              echo "‚ö†Ô∏è Ingress hostname $ingress_hostname does not resolve (may be propagating)"
            else
              echo "‚úÖ Ingress hostname $ingress_hostname resolves successfully"
              
              # Test if it points to the load balancer
              resolved_ip=$(nslookup "$ingress_hostname" | grep -A1 "Name:" | tail -1 | awk '{print $2}' || echo "")
              lb_ip=$(nslookup "$lb_hostname" | grep -A1 "Name:" | tail -1 | awk '{print $2}' || echo "")
              
              if [[ "$resolved_ip" == "$lb_ip" ]]; then
                echo "‚úÖ Ingress hostname correctly points to load balancer"
              else
                echo "‚ö†Ô∏è Ingress hostname may not point to correct load balancer (DNS propagation)"
              fi
            fi
          fi
          
          echo "result=$result" >> $GITHUB_OUTPUT

  test-http-connectivity:
    name: üåç Test HTTP Connectivity
    runs-on: ubuntu-latest
    needs: [determine-test-parameters, discover-resources, test-dns-resolution]
    if: needs.determine-test-parameters.outputs.should-run == 'true'
    outputs:
      http-test-result: ${{ steps.http-test.outputs.result }}
      response-time: ${{ steps.http-test.outputs.response-time }}
    steps:
      - name: Test HTTP Connectivity
        id: http-test
        run: |
          lb_hostname="${{ needs.discover-resources.outputs.load-balancer-hostname }}"
          ingress_hostname="${{ needs.discover-resources.outputs.ingress-hostname }}"
          pattern="${{ needs.determine-test-parameters.outputs.pattern }}"
          
          result="success"
          response_time="0"
          
          if [[ -z "$lb_hostname" ]]; then
            echo "‚ùå No LoadBalancer hostname found"
            result="failure"
            echo "result=$result" >> $GITHUB_OUTPUT
            echo "response-time=$response_time" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "üåç Testing HTTP connectivity to LoadBalancer: $lb_hostname"
          
          # Test direct LoadBalancer access
          start_time=$(date +%s.%N)
          if curl -s --max-time 30 --connect-timeout 10 "http://$lb_hostname" >/dev/null 2>&1; then
            end_time=$(date +%s.%N)
            response_time=$(echo "$end_time - $start_time" | bc -l | xargs printf "%.2f")
            echo "‚úÖ LoadBalancer responds to HTTP requests (${response_time}s)"
          else
            echo "‚ùå LoadBalancer does not respond to HTTP requests"
            result="failure"
          fi
          
          # Test ingress hostname if available
          if [[ -n "$ingress_hostname" ]]; then
            echo "üîç Testing ingress hostname: $ingress_hostname"
            if curl -s --max-time 30 --connect-timeout 10 -H "Host: $ingress_hostname" "http://$lb_hostname" >/dev/null 2>&1; then
              echo "‚úÖ Ingress hostname responds correctly"
            else
              echo "‚ö†Ô∏è Ingress hostname may not be fully configured"
            fi
          fi
          
          # Pattern-specific tests
          if [[ "$pattern" == "alb" ]]; then
            echo "üéØ Testing ALB-specific headers..."
            alb_headers=$(curl -s --max-time 10 -I "http://$lb_hostname" | grep -i "server\|x-amzn" || true)
            if [[ -n "$alb_headers" ]]; then
              echo "‚úÖ ALB-specific headers detected"
              echo "$alb_headers"
            fi
          else
            echo "üéØ Testing NGINX-specific headers..."
            nginx_headers=$(curl -s --max-time 10 -I "http://$lb_hostname" | grep -i "nginx\|server" || true)
            if [[ -n "$nginx_headers" ]]; then
              echo "‚úÖ NGINX-specific headers detected" 
              echo "$nginx_headers"
            fi
          fi
          
          echo "result=$result" >> $GITHUB_OUTPUT
          echo "response-time=$response_time" >> $GITHUB_OUTPUT

  test-https-certificates:
    name: üîí Test HTTPS Certificates
    runs-on: ubuntu-latest
    needs: [determine-test-parameters, discover-resources, test-http-connectivity]
    if: needs.determine-test-parameters.outputs.should-run == 'true'
    outputs:
      https-test-result: ${{ steps.https-test.outputs.result }}
      certificate-issuer: ${{ steps.https-test.outputs.certificate-issuer }}
    steps:
      - name: Test HTTPS Certificates
        id: https-test
        run: |
          lb_hostname="${{ needs.discover-resources.outputs.load-balancer-hostname }}"
          ingress_hostname="${{ needs.discover-resources.outputs.ingress-hostname }}"
          cert_ready="${{ needs.discover-resources.outputs.certificate-ready }}"
          
          result="success"
          certificate_issuer=""
          
          echo "üîí Testing HTTPS certificates..."
          echo "Certificate Ready Status: $cert_ready"
          
          if [[ "$cert_ready" == "true" && -n "$ingress_hostname" ]]; then
            echo "üîç Testing HTTPS connection to: $ingress_hostname"
            
            # Test HTTPS connectivity
            if curl -s --max-time 30 --connect-timeout 10 "https://$ingress_hostname" >/dev/null 2>&1; then
              echo "‚úÖ HTTPS connection successful"
              
              # Get certificate information
              cert_info=$(openssl s_client -connect "$ingress_hostname:443" -servername "$ingress_hostname" </dev/null 2>/dev/null | openssl x509 -noout -issuer -dates 2>/dev/null || true)
              
              if [[ -n "$cert_info" ]]; then
                echo "üìú Certificate Information:"
                echo "$cert_info"
                
                # Extract issuer
                certificate_issuer=$(echo "$cert_info" | grep "issuer" | sed 's/issuer=//' || echo "Unknown")
                
                # Check if it's Let's Encrypt
                if echo "$cert_info" | grep -qi "let's encrypt"; then
                  echo "‚úÖ Let's Encrypt certificate detected"
                elif echo "$cert_info" | grep -qi "staging"; then
                  echo "‚ö†Ô∏è Let's Encrypt Staging certificate (expected for demo)"
                fi
              fi
              
            else
              echo "‚ùå HTTPS connection failed"
              result="warning"  # Not a hard failure for demo environments
            fi
            
          elif [[ "$cert_ready" == "false" ]]; then
            echo "‚ö†Ô∏è Certificate not ready yet (may still be provisioning)"
            result="warning"
          else
            echo "‚ÑπÔ∏è No ingress hostname available for HTTPS testing"
            result="warning"
          fi
          
          echo "result=$result" >> $GITHUB_OUTPUT
          echo "certificate-issuer=$certificate_issuer" >> $GITHUB_OUTPUT

  test-application-functionality:
    name: üöÄ Test Application Functionality
    runs-on: ubuntu-latest
    needs: [determine-test-parameters, discover-resources, test-http-connectivity]
    if: needs.determine-test-parameters.outputs.should-run == 'true' && needs.test-http-connectivity.outputs.http-test-result == 'success'
    outputs:
      app-test-result: ${{ steps.app-test.outputs.result }}
    steps:
      - name: Test Demo Application
        id: app-test
        run: |
          lb_hostname="${{ needs.discover-resources.outputs.load-balancer-hostname }}"
          ingress_hostname="${{ needs.discover-resources.outputs.ingress-hostname }}"
          pattern="${{ needs.determine-test-parameters.outputs.pattern }}"
          
          result="success"
          
          echo "üöÄ Testing demo application functionality..."
          
          # Test application response
          if [[ -n "$lb_hostname" ]]; then
            echo "üìã Testing application via LoadBalancer: $lb_hostname"
            
            app_response=$(curl -s --max-time 30 "http://$lb_hostname" 2>/dev/null || echo "")
            
            if [[ -n "$app_response" ]]; then
              echo "‚úÖ Application responds with content"
              
              # Check for pattern-specific content
              if [[ "$pattern" == "alb" && "$app_response" == *"purple"* ]]; then
                echo "‚úÖ ALB demo app detected (purple theme)"
              elif [[ "$pattern" == "nginx" && "$app_response" == *"pink"* ]]; then
                echo "‚úÖ NGINX demo app detected (pink theme)"
              else
                echo "‚ÑπÔ∏è Generic application response received"
              fi
              
              # Check for HTML structure
              if [[ "$app_response" == *"<html>"* || "$app_response" == *"<title>"* ]]; then
                echo "‚úÖ Valid HTML response detected"
              fi
              
            else
              echo "‚ùå No application response received"
              result="failure"
            fi
          fi
          
          echo "result=$result" >> $GITHUB_OUTPUT

  generate-test-report:
    name: üìä Generate Test Report
    runs-on: ubuntu-latest
    needs: [
      determine-test-parameters,
      discover-resources, 
      test-dns-resolution,
      test-http-connectivity,
      test-https-certificates,
      test-application-functionality
    ]
    if: always() && needs.determine-test-parameters.outputs.should-run == 'true'
    steps:
      - name: Send Test Results to Slack
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          pattern="${{ needs.determine-test-parameters.outputs.pattern }}"
          environment="${{ needs.determine-test-parameters.outputs.environment }}"
          
          # Determine overall test status
          dns_result="${{ needs.test-dns-resolution.outputs.dns-test-result }}"
          http_result="${{ needs.test-http-connectivity.outputs.http-test-result }}"
          https_result="${{ needs.test-https-certificates.outputs.https-test-result }}"
          app_result="${{ needs.test-application-functionality.outputs.app-test-result }}"
          
          overall_status="success"
          if [[ "$http_result" == "failure" || "$app_result" == "failure" ]]; then
            overall_status="failure"
          elif [[ "$dns_result" == "failure" || "$https_result" == "warning" ]]; then
            overall_status="warning"
          fi

          color="good"
          emoji="‚úÖ"
          if [[ "$overall_status" == "failure" ]]; then
            color="danger"
            emoji="‚ùå"
          elif [[ "$overall_status" == "warning" ]]; then
            color="warning"
            emoji="‚ö†Ô∏è"
          fi

          payload=$(cat <<EOF
          {
            "attachments": [
              {
                "color": "$color",
                "title": "$emoji Kubernetes Ingress Test Results",
                "fields": [
                  {
                    "title": "Pattern",
                    "value": "$pattern",
                    "short": true
                  },
                  {
                    "title": "Environment",
                    "value": "$environment", 
                    "short": true
                  },
                  {
                    "title": "DNS Resolution",
                    "value": "$dns_result",
                    "short": true
                  },
                  {
                    "title": "HTTP Connectivity", 
                    "value": "$http_result",
                    "short": true
                  },
                  {
                    "title": "HTTPS Certificates",
                    "value": "$https_result",
                    "short": true
                  },
                  {
                    "title": "Application",
                    "value": "$app_result",
                    "short": true
                  }
                ],
                "footer": "GitHub Actions - Ingress Testing",
                "ts": $(date +%s)
              }
            ]
          }
          EOF
          )

          curl -X POST -H 'Content-type: application/json' \
            --data "$payload" \
            "$SLACK_WEBHOOK_URL"

      - name: Generate Test Summary
        run: |
          echo "## üß™ Kubernetes Ingress Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pattern**: ${{ needs.determine-test-parameters.outputs.pattern }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ needs.determine-test-parameters.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Domain**: ${{ needs.determine-test-parameters.outputs.domain-name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üîç Resource Discovery" >> $GITHUB_STEP_SUMMARY
          echo "- **LoadBalancer**: \`${{ needs.discover-resources.outputs.load-balancer-hostname }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Ingress Hostname**: \`${{ needs.discover-resources.outputs.ingress-hostname }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Certificate Ready**: ${{ needs.discover-resources.outputs.certificate-ready }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìã Test Results" >> $GITHUB_STEP_SUMMARY
          
          dns_result="${{ needs.test-dns-resolution.outputs.dns-test-result }}"
          if [[ "$dns_result" == "success" ]]; then
            echo "- ‚úÖ **DNS Resolution**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå **DNS Resolution**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          http_result="${{ needs.test-http-connectivity.outputs.http-test-result }}"
          response_time="${{ needs.test-http-connectivity.outputs.response-time }}"
          if [[ "$http_result" == "success" ]]; then
            echo "- ‚úÖ **HTTP Connectivity**: Passed (${response_time}s)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå **HTTP Connectivity**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          https_result="${{ needs.test-https-certificates.outputs.https-test-result }}"
          cert_issuer="${{ needs.test-https-certificates.outputs.certificate-issuer }}"
          if [[ "$https_result" == "success" ]]; then
            echo "- ‚úÖ **HTTPS Certificates**: Working ($cert_issuer)" >> $GITHUB_STEP_SUMMARY
          elif [[ "$https_result" == "warning" ]]; then
            echo "- ‚ö†Ô∏è **HTTPS Certificates**: Provisioning or staging cert" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå **HTTPS Certificates**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          app_result="${{ needs.test-application-functionality.outputs.app-test-result }}"
          if [[ "$app_result" == "success" ]]; then
            echo "- ‚úÖ **Application**: Responding correctly" >> $GITHUB_STEP_SUMMARY
          elif [[ "$app_result" == "failure" ]]; then
            echo "- ‚ùå **Application**: Not responding" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ûñ **Application**: Test skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üåê Access Information" >> $GITHUB_STEP_SUMMARY
          if [[ -n "${{ needs.discover-resources.outputs.load-balancer-hostname }}" ]]; then
            echo "**Direct LoadBalancer Access:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "http://${{ needs.discover-resources.outputs.load-balancer-hostname }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ -n "${{ needs.discover-resources.outputs.ingress-hostname }}" ]]; then
            echo "**Ingress Hostname:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "http://${{ needs.discover-resources.outputs.ingress-hostname }}" >> $GITHUB_STEP_SUMMARY
            echo "https://${{ needs.discover-resources.outputs.ingress-hostname }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
name: 🏗️ Foundation Platform

# MANUAL EXECUTION ONLY - No automatic triggers on push/PR
on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Infrastructure Action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply  
        - destroy
      environment:
        description: 'Target Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      confirm_destroy:
        description: 'For DESTROY: type CONFIRM-DESTROY'
        required: false
        type: string
      auto_approve:
        description: 'Auto-approve apply (use with caution)'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read

env:
  TF_VERSION: '1.6.0'
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

jobs:
  validate-inputs:
    name: 🔍 Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      action: ${{ steps.validate.outputs.action }}
      environment: ${{ steps.validate.outputs.environment }}
      should-proceed: ${{ steps.validate.outputs.should-proceed }}
    steps:
      - name: Validate Inputs
        id: validate
        run: |
          echo "action=${{ inputs.action }}" >> $GITHUB_OUTPUT
          echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          
          # Validate destroy confirmation
          if [[ "${{ inputs.action }}" == "destroy" ]]; then
            if [[ "${{ inputs.confirm_destroy }}" != "CONFIRM-DESTROY" ]]; then
              echo "❌ Destroy action requires 'CONFIRM-DESTROY' confirmation"
              echo "should-proceed=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            echo "✅ Destroy confirmation validated"
          fi
          
          echo "should-proceed=true" >> $GITHUB_OUTPUT

  terraform-operation:
    name: 🏗️ Deploy EKS Foundation Platform
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: needs.validate-inputs.outputs.should-proceed == 'true'
    environment: ${{ needs.validate-inputs.outputs.environment }}
    outputs:
      cluster-name: ${{ steps.output.outputs.cluster-name }}
      cluster-endpoint: ${{ steps.output.outputs.cluster-endpoint }}
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-EKSFoundation

      - name: 🏗️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: 📋 Terraform Init
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: |
          terraform init -backend-config="bucket=eks-learning-lab-terraform-state-${{ secrets.AWS_ACCOUNT_ID }}"

      - name: ✅ Terraform Validate
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: terraform validate

      - name: 📊 Terraform Plan
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: |
          if [[ "${{ needs.validate-inputs.outputs.action }}" == "destroy" ]]; then
            terraform plan -destroy -out=tfplan
          else
            terraform plan -out=tfplan
          fi

      - name: 🚀 Terraform Apply
        if: needs.validate-inputs.outputs.action == 'apply'
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: |
          if [[ "${{ inputs.auto_approve }}" == "true" ]]; then
            terraform apply tfplan
          else
            echo "❌ Manual approval required. Set auto_approve=true to proceed."
            exit 1
          fi

      - name: 🗑️ Terraform Destroy
        if: needs.validate-inputs.outputs.action == 'destroy'
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        timeout-minutes: 45
        run: terraform apply tfplan

      - name: 📤 Get Cluster Information
        id: output
        if: needs.validate-inputs.outputs.action == 'apply'
        working-directory: terraform/environments/${{ needs.validate-inputs.outputs.environment }}
        run: |
          cluster_name=$(terraform output -raw cluster_name 2>/dev/null || echo "")
          cluster_endpoint=$(terraform output -raw cluster_endpoint 2>/dev/null || echo "")
          
          echo "cluster-name=$cluster_name" >> $GITHUB_OUTPUT
          echo "cluster-endpoint=$cluster_endpoint" >> $GITHUB_OUTPUT
          
          echo "✅ EKS Foundation Platform deployed successfully!"
          echo "🎯 Cluster Name: $cluster_name"
          echo "🌐 Cluster Endpoint: $cluster_endpoint"

      - name: 🔧 Configure kubectl
        if: needs.validate-inputs.outputs.action == 'apply'
        run: |
          cluster_name="${{ steps.output.outputs.cluster-name }}"
          if [[ -n "$cluster_name" ]]; then
            aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name "$cluster_name"
            kubectl cluster-info --request-timeout=10s
            echo "✅ kubectl configured for cluster: $cluster_name"
          fi

  summary:
    name: 📋 Deployment Summary
    runs-on: ubuntu-latest
    needs: [validate-inputs, terraform-operation]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "## 🏗️ EKS Foundation Platform Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Action**: ${{ needs.validate-inputs.outputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ needs.validate-inputs.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ needs.terraform-operation.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.terraform-operation.result }}" == "success" ]]; then
            if [[ "${{ needs.validate-inputs.outputs.action }}" == "apply" ]]; then
              echo "### ✅ Foundation Platform Deployed Successfully!" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Infrastructure Created:**" >> $GITHUB_STEP_SUMMARY
              echo "- 🌐 VPC with public/private subnets across 2+ AZs" >> $GITHUB_STEP_SUMMARY
              echo "- 🏗️ EKS cluster with managed node group" >> $GITHUB_STEP_SUMMARY
              echo "- 🔐 IAM roles and OIDC provider for IRSA" >> $GITHUB_STEP_SUMMARY
              echo "- 📦 Essential add-ons (vpc-cni, kube-proxy, coredns, ebs-csi-driver)" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              if [[ -n "${{ needs.terraform-operation.outputs.cluster-name }}" ]]; then
                echo "**Cluster Details:**" >> $GITHUB_STEP_SUMMARY
                echo "- Name: \`${{ needs.terraform-operation.outputs.cluster-name }}\`" >> $GITHUB_STEP_SUMMARY
                echo "- Endpoint: \`${{ needs.terraform-operation.outputs.cluster-endpoint }}\`" >> $GITHUB_STEP_SUMMARY
              fi
            elif [[ "${{ needs.validate-inputs.outputs.action }}" == "destroy" ]]; then
              echo "### ✅ Infrastructure Destroyed Successfully!" >> $GITHUB_STEP_SUMMARY
              echo "💰 All resources have been cleaned up to save costs." >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ needs.validate-inputs.outputs.action }}" == "plan" ]]; then
              echo "### 📊 Plan Generated Successfully!" >> $GITHUB_STEP_SUMMARY
              echo "Review the plan output above before proceeding with apply." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "### ❌ Operation Failed!" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs above for details." >> $GITHUB_STEP_SUMMARY
          fi
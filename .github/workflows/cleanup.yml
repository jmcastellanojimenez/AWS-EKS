name: üßπ Cleanup Kubernetes Ingress Resources

on:
  workflow_dispatch:
    inputs:
      ingress_pattern:
        description: 'Ingress Pattern to Clean Up'
        required: true
        type: choice
        options:
        - alb
        - nginx
        - all
      environment:
        description: 'Target Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging  
        - prod
      confirm_cleanup:
        description: 'Confirmation (type CONFIRM-CLEANUP to proceed)'
        required: true
        type: string
      cleanup_shared:
        description: 'Also cleanup shared resources (Route53, IAM roles)'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read

env:
  TF_VERSION: '1.6.0'
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

jobs:
  validate-cleanup:
    name: üîç Validate Cleanup Request
    runs-on: ubuntu-latest
    outputs:
      should-proceed: ${{ steps.validate.outputs.should-proceed }}
      pattern: ${{ steps.validate.outputs.pattern }}
      environment: ${{ steps.validate.outputs.environment }}
      cleanup-shared: ${{ steps.validate.outputs.cleanup-shared }}
    steps:
      - name: Validate Confirmation
        id: validate
        run: |
          if [[ "${{ inputs.confirm_cleanup }}" != "CONFIRM-CLEANUP" ]]; then
            echo "‚ùå Cleanup requires 'CONFIRM-CLEANUP' confirmation"
            echo "should-proceed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "‚úÖ Cleanup confirmation validated"
          echo "should-proceed=true" >> $GITHUB_OUTPUT
          echo "pattern=${{ inputs.ingress_pattern }}" >> $GITHUB_OUTPUT
          echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
          echo "cleanup-shared=${{ inputs.cleanup_shared }}" >> $GITHUB_OUTPUT
          
          echo "## üßπ Ingress Cleanup Operation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pattern**: ${{ inputs.ingress_pattern }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Cleanup Shared**: ${{ inputs.cleanup_shared }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è **WARNING**: This will destroy infrastructure and may incur costs to recreate." >> $GITHUB_STEP_SUMMARY

  cleanup-kubernetes-resources:
    name: üóëÔ∏è Cleanup Kubernetes Resources
    runs-on: ubuntu-latest
    needs: validate-cleanup
    if: needs.validate-cleanup.outputs.should-proceed == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-K8sCleanup

      - name: Setup kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl && sudo mv kubectl /usr/local/bin/

      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.14.0'

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig \
            --region ${{ secrets.AWS_REGION }} \
            --name eks-learning-lab-${{ needs.validate-cleanup.outputs.environment }} || {
            echo "‚ö†Ô∏è Could not connect to EKS cluster - may already be deleted"
          }

      - name: Delete Demo Applications
        run: |
          echo "üóëÔ∏è Deleting demo applications..."
          
          # Delete pattern-specific ingress resources
          if [[ "${{ needs.validate-cleanup.outputs.pattern }}" == "alb" || "${{ needs.validate-cleanup.outputs.pattern }}" == "all" ]]; then
            kubectl delete -f k8s/alb/ --ignore-not-found=true
          fi
          
          if [[ "${{ needs.validate-cleanup.outputs.pattern }}" == "nginx" || "${{ needs.validate-cleanup.outputs.pattern }}" == "all" ]]; then
            kubectl delete -f k8s/nginx/ --ignore-not-found=true
          fi
          
          # Delete demo apps
          kubectl delete -f k8s/demo-apps/ --ignore-not-found=true
          
          # Wait for ingress resources to be fully deleted
          echo "‚è≥ Waiting for ingress resources to be deleted..."
          sleep 30

      - name: Uninstall ALB Controller
        if: needs.validate-cleanup.outputs.pattern == 'alb' || needs.validate-cleanup.outputs.pattern == 'all'
        run: |
          echo "üóëÔ∏è Uninstalling AWS Load Balancer Controller..."
          helm uninstall aws-load-balancer-controller -n kube-system --ignore-not-found
          
          # Delete service account
          kubectl delete serviceaccount aws-load-balancer-controller -n kube-system --ignore-not-found=true

      - name: Uninstall NGINX Controller  
        if: needs.validate-cleanup.outputs.pattern == 'nginx' || needs.validate-cleanup.outputs.pattern == 'all'
        run: |
          echo "üóëÔ∏è Uninstalling NGINX Ingress Controller..."
          helm uninstall ingress-nginx -n ingress-nginx --ignore-not-found
          
          # Wait for NLB to be deleted
          echo "‚è≥ Waiting for NLB to be deleted..."
          sleep 60

      - name: Uninstall Supporting Services
        if: needs.validate-cleanup.outputs.pattern == 'all'
        run: |
          echo "üóëÔ∏è Uninstalling cert-manager and external-dns..."
          
          # Delete cert-manager ClusterIssuer first
          kubectl delete -f k8s/cert-manager/ --ignore-not-found=true
          
          # Uninstall Helm releases
          helm uninstall cert-manager -n cert-manager --ignore-not-found
          helm uninstall external-dns -n external-dns --ignore-not-found
          
          # Clean up namespaces
          kubectl delete namespace cert-manager --ignore-not-found=true
          kubectl delete namespace external-dns --ignore-not-found=true
          kubectl delete namespace ingress-nginx --ignore-not-found=true

  cleanup-alb-infrastructure:
    name: üèóÔ∏è Cleanup ALB Infrastructure
    runs-on: ubuntu-latest
    needs: [validate-cleanup, cleanup-kubernetes-resources]
    if: needs.validate-cleanup.outputs.should-proceed == 'true' && (needs.validate-cleanup.outputs.pattern == 'alb' || needs.validate-cleanup.outputs.pattern == 'all')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-ALBCleanup

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init - ALB Pattern
        working-directory: terraform/alb-pattern
        run: |
          terraform init \
            -backend-config="bucket=eks-learning-lab-terraform-state-${{ secrets.AWS_ACCOUNT_ID }}" \
            -backend-config="key=ingress-alb-${{ needs.validate-cleanup.outputs.environment }}/terraform.tfstate"

      - name: Terraform Destroy - ALB Pattern
        working-directory: terraform/alb-pattern
        timeout-minutes: 30
        run: |
          # Use hardcoded values that we know exist from the deployment logs
          terraform plan -destroy -out=destroy-plan \
            -var="environment=${{ needs.validate-cleanup.outputs.environment }}" \
            -var="hosted_zone_id=Z04646232L1DAAQOSVDYD" \
            -var="domain_name=k8s-demo.local"
          terraform apply destroy-plan

  cleanup-nginx-infrastructure:
    name: üèóÔ∏è Cleanup NGINX Infrastructure
    runs-on: ubuntu-latest
    needs: [validate-cleanup, cleanup-kubernetes-resources]
    if: needs.validate-cleanup.outputs.should-proceed == 'true' && (needs.validate-cleanup.outputs.pattern == 'nginx' || needs.validate-cleanup.outputs.pattern == 'all')
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-NGINXCleanup

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init - NGINX Pattern
        working-directory: terraform/nginx-pattern
        run: |
          terraform init \
            -backend-config="bucket=eks-learning-lab-terraform-state-${{ secrets.AWS_ACCOUNT_ID }}" \
            -backend-config="key=ingress-nginx-${{ needs.validate-cleanup.outputs.environment }}/terraform.tfstate"

      - name: Terraform Destroy - NGINX Pattern
        working-directory: terraform/nginx-pattern
        timeout-minutes: 30
        run: |
          # Use hardcoded values that we know exist from the deployment logs
          terraform plan -destroy -out=destroy-plan \
            -var="environment=${{ needs.validate-cleanup.outputs.environment }}" \
            -var="hosted_zone_id=Z04646232L1DAAQOSVDYD" \
            -var="domain_name=k8s-demo.local"
          terraform apply destroy-plan

  cleanup-shared-infrastructure:
    name: üèóÔ∏è Cleanup Shared Infrastructure
    runs-on: ubuntu-latest
    needs: [validate-cleanup, cleanup-alb-infrastructure, cleanup-nginx-infrastructure]
    if: needs.validate-cleanup.outputs.should-proceed == 'true' && needs.validate-cleanup.outputs.cleanup-shared == 'true' && always()
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-SharedCleanup

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init - Shared
        working-directory: terraform/shared
        run: |
          terraform init \
            -backend-config="bucket=eks-learning-lab-terraform-state-${{ secrets.AWS_ACCOUNT_ID }}" \
            -backend-config="key=ingress-shared/terraform.tfstate"

      - name: Terraform Destroy - Shared
        working-directory: terraform/shared
        timeout-minutes: 30
        run: |
          terraform plan -destroy -out=destroy-plan \
            -var="environment=${{ needs.validate-cleanup.outputs.environment }}"
          terraform apply destroy-plan

  notify-cleanup-completion:
    name: üì¢ Notify Cleanup Completion
    runs-on: ubuntu-latest
    needs: [validate-cleanup, cleanup-kubernetes-resources, cleanup-alb-infrastructure, cleanup-nginx-infrastructure, cleanup-shared-infrastructure]
    if: always() && needs.validate-cleanup.outputs.should-proceed == 'true'
    steps:
      - name: Send Slack Notification
        if: env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          # Determine overall status
          k8s_status="${{ needs.cleanup-kubernetes-resources.result }}"
          alb_status="${{ needs.cleanup-alb-infrastructure.result }}"
          nginx_status="${{ needs.cleanup-nginx-infrastructure.result }}"  
          shared_status="${{ needs.cleanup-shared-infrastructure.result }}"
          
          overall_status="success"
          if [[ "$k8s_status" == "failure" ]] || \
             [[ "$alb_status" == "failure" ]] || \
             [[ "$nginx_status" == "failure" ]] || \
             [[ "$shared_status" == "failure" ]]; then
            overall_status="failure"
          fi

          color="good"
          emoji="‚úÖ"
          if [[ "$overall_status" == "failure" ]]; then
            color="danger" 
            emoji="‚ùå"
          fi

          payload=$(cat <<EOF
          {
            "attachments": [
              {
                "color": "$color",
                "title": "$emoji Kubernetes Ingress Cleanup Completed",
                "fields": [
                  {
                    "title": "Pattern",
                    "value": "${{ needs.validate-cleanup.outputs.pattern }}",
                    "short": true
                  },
                  {
                    "title": "Environment",
                    "value": "${{ needs.validate-cleanup.outputs.environment }}",
                    "short": true
                  },
                  {
                    "title": "Shared Resources",
                    "value": "${{ needs.validate-cleanup.outputs.cleanup-shared }}",
                    "short": true
                  },
                  {
                    "title": "Overall Status",
                    "value": "$overall_status",
                    "short": true
                  }
                ],
                "footer": "GitHub Actions - Cleanup",
                "ts": $(date +%s)
              }
            ]
          }
          EOF
          )

          curl -X POST -H 'Content-type: application/json' \
            --data "$payload" \
            "$SLACK_WEBHOOK_URL"

      - name: Generate Cleanup Summary
        run: |
          echo "## üßπ Kubernetes Ingress Cleanup Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pattern**: ${{ needs.validate-cleanup.outputs.pattern }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ needs.validate-cleanup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Cleanup Shared**: ${{ needs.validate-cleanup.outputs.cleanup-shared }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üóëÔ∏è Cleanup Results" >> $GITHUB_STEP_SUMMARY
          
          k8s_status="${{ needs.cleanup-kubernetes-resources.result }}"
          if [[ "$k8s_status" == "success" ]]; then
            echo "- ‚úÖ Kubernetes resources cleaned up" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ‚ùå Kubernetes cleanup failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.validate-cleanup.outputs.pattern }}" == "alb" || "${{ needs.validate-cleanup.outputs.pattern }}" == "all" ]]; then
            alb_status="${{ needs.cleanup-alb-infrastructure.result }}"
            if [[ "$alb_status" == "success" ]]; then
              echo "- ‚úÖ ALB infrastructure destroyed" >> $GITHUB_STEP_SUMMARY
            elif [[ "$alb_status" == "failure" ]]; then
              echo "- ‚ùå ALB infrastructure cleanup failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          if [[ "${{ needs.validate-cleanup.outputs.pattern }}" == "nginx" || "${{ needs.validate-cleanup.outputs.pattern }}" == "all" ]]; then
            nginx_status="${{ needs.cleanup-nginx-infrastructure.result }}"
            if [[ "$nginx_status" == "success" ]]; then
              echo "- ‚úÖ NGINX infrastructure destroyed" >> $GITHUB_STEP_SUMMARY
            elif [[ "$nginx_status" == "failure" ]]; then
              echo "- ‚ùå NGINX infrastructure cleanup failed" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          if [[ "${{ needs.validate-cleanup.outputs.cleanup-shared }}" == "true" ]]; then
            shared_status="${{ needs.cleanup-shared-infrastructure.result }}"
            if [[ "$shared_status" == "success" ]]; then
              echo "- ‚úÖ Shared infrastructure destroyed" >> $GITHUB_STEP_SUMMARY
            elif [[ "$shared_status" == "failure" ]]; then
              echo "- ‚ùå Shared infrastructure cleanup failed" >> $GITHUB_STEP_SUMMARY  
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üí∞ Cost Savings" >> $GITHUB_STEP_SUMMARY
          echo "Monthly savings from cleanup:" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.validate-cleanup.outputs.pattern }}" == "alb" ]]; then
            echo "- **ALB**: ~\$16/month saved" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.validate-cleanup.outputs.pattern }}" == "nginx" ]]; then
            echo "- **NLB**: ~\$16/month saved" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.validate-cleanup.outputs.pattern }}" == "all" ]]; then
            echo "- **Load Balancers**: ~\$16/month saved" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.validate-cleanup.outputs.cleanup-shared }}" == "true" ]]; then
            echo "- **Route53**: ~\$0.50/month saved" >> $GITHUB_STEP_SUMMARY
          fi
name: 🏗️ SA Infra - Ingress Infrastructure Foundation

on:
  workflow_dispatch:
    inputs:
      domain_name:
        description: 'Domain name for ingress (e.g., k8s-demo.local)'
        required: true
        default: 'k8s-demo.local'
        type: string
      environment:
        description: 'Target Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      hosted_zone_id:
        description: 'Route53 hosted zone ID (leave empty to auto-create)'
        required: false
        type: string
      aws_region:
        description: 'AWS Region'
        required: false
        default: 'us-east-1'
        type: string
  workflow_call:
    inputs:
      domain_name:
        required: true
        type: string
      environment:
        required: true
        type: string
      hosted_zone_id:
        required: false
        type: string
      aws_region:
        required: false
        type: string
        default: 'us-east-1'
    outputs:
      hosted_zone_id:
        description: "Route53 hosted zone ID"
        value: ${{ jobs.deploy-infrastructure.outputs.hosted_zone_id }}
      alb_controller_role_arn:
        description: "ALB Controller IAM role ARN"
        value: ${{ jobs.deploy-infrastructure.outputs.alb_controller_role_arn }}
      external_dns_role_arn:
        description: "External-DNS IAM role ARN"
        value: ${{ jobs.deploy-infrastructure.outputs.external_dns_role_arn }}
      cert_manager_role_arn:
        description: "cert-manager IAM role ARN"  
        value: ${{ jobs.deploy-infrastructure.outputs.cert_manager_role_arn }}
      domain_name:
        description: "Domain name used"
        value: ${{ jobs.deploy-infrastructure.outputs.domain_name }}

permissions:
  id-token: write
  contents: read

env:
  TF_VERSION: '1.6.0'

jobs:
  deploy-infrastructure:
    name: 🏗️ Deploy AWS Infrastructure
    runs-on: ubuntu-latest
    outputs:
      hosted_zone_id: ${{ steps.outputs.outputs.hosted_zone_id }}
      alb_controller_role_arn: ${{ steps.outputs.outputs.alb_controller_role_arn }}
      external_dns_role_arn: ${{ steps.outputs.outputs.external_dns_role_arn }}
      cert_manager_role_arn: ${{ steps.outputs.outputs.cert_manager_role_arn }}
      domain_name: ${{ steps.outputs.outputs.domain_name }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ inputs.aws_region || 'us-east-1' }}
          role-session-name: SA-IngressInfra

      - name: 🏗️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: 🌐 Deploy Shared Infrastructure
        id: shared
        working-directory: terraform/shared
        run: |
          terraform init \
            -backend-config="bucket=eks-learning-lab-terraform-state-${{ secrets.AWS_ACCOUNT_ID }}" \
            -backend-config="key=ingress-shared/terraform.tfstate"
          
          terraform plan -out=tfplan \
            -var="environment=${{ inputs.environment }}"
          
          terraform apply tfplan
          
          # Get outputs
          HOSTED_ZONE_ID=$(terraform output -raw hosted_zone_id 2>/dev/null || echo "")
          DOMAIN_NAME=$(terraform output -raw domain_name 2>/dev/null || echo "${{ inputs.domain_name }}")
          
          echo "hosted_zone_id=$HOSTED_ZONE_ID" >> $GITHUB_OUTPUT
          echo "domain_name=$DOMAIN_NAME" >> $GITHUB_OUTPUT
          
          echo "✅ Shared infrastructure deployed"
          echo "🌐 Hosted Zone ID: $HOSTED_ZONE_ID"
          echo "🏷️ Domain Name: $DOMAIN_NAME"

      - name: 🎯 Deploy ALB Pattern Infrastructure
        id: alb
        working-directory: terraform/alb-pattern
        run: |
          terraform init \
            -backend-config="bucket=eks-learning-lab-terraform-state-${{ secrets.AWS_ACCOUNT_ID }}" \
            -backend-config="key=ingress-alb-${{ inputs.environment }}/terraform.tfstate"
          
          # Use provided hosted zone ID or the one from shared infrastructure
          HOSTED_ZONE_ID="${{ inputs.hosted_zone_id }}"
          if [[ -z "$HOSTED_ZONE_ID" ]]; then
            HOSTED_ZONE_ID="${{ steps.shared.outputs.hosted_zone_id }}"
          fi
          
          terraform plan -out=tfplan \
            -var="environment=${{ inputs.environment }}" \
            -var="hosted_zone_id=$HOSTED_ZONE_ID" \
            -var="domain_name=${{ inputs.domain_name }}"
          
          terraform apply tfplan
          
          # Get outputs
          ALB_ROLE_ARN=$(terraform output -raw lb_controller_role_arn 2>/dev/null || echo "")
          EXT_DNS_ROLE_ARN=$(terraform output -raw external_dns_role_arn 2>/dev/null || echo "")
          CERT_MGR_ROLE_ARN=$(terraform output -raw cert_manager_role_arn 2>/dev/null || echo "")
          
          echo "alb_controller_role_arn=$ALB_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "external_dns_role_arn=$EXT_DNS_ROLE_ARN" >> $GITHUB_OUTPUT
          echo "cert_manager_role_arn=$CERT_MGR_ROLE_ARN" >> $GITHUB_OUTPUT
          
          echo "✅ ALB pattern infrastructure deployed"
          echo "🎯 ALB Controller Role: $ALB_ROLE_ARN"
          echo "🌐 External-DNS Role: $EXT_DNS_ROLE_ARN"
          echo "🔒 cert-manager Role: $CERT_MGR_ROLE_ARN"

      - name: 📊 Set Final Outputs
        id: outputs
        run: |
          echo "hosted_zone_id=${{ steps.shared.outputs.hosted_zone_id }}" >> $GITHUB_OUTPUT
          echo "alb_controller_role_arn=${{ steps.alb.outputs.alb_controller_role_arn }}" >> $GITHUB_OUTPUT
          echo "external_dns_role_arn=${{ steps.alb.outputs.external_dns_role_arn }}" >> $GITHUB_OUTPUT
          echo "cert_manager_role_arn=${{ steps.alb.outputs.cert_manager_role_arn }}" >> $GITHUB_OUTPUT
          echo "domain_name=${{ steps.shared.outputs.domain_name }}" >> $GITHUB_OUTPUT

      - name: 📋 Infrastructure Summary
        run: |
          echo "## 🏗️ SA Infrastructure Foundation - Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Domain**: ${{ steps.shared.outputs.domain_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**AWS Region**: ${{ inputs.aws_region || 'us-east-1' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 DNS & Networking" >> $GITHUB_STEP_SUMMARY
          echo "- **Hosted Zone ID**: \`${{ steps.shared.outputs.hosted_zone_id }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔐 IAM Roles (IRSA)" >> $GITHUB_STEP_SUMMARY
          echo "- **ALB Controller**: \`${{ steps.alb.outputs.alb_controller_role_arn }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **External-DNS**: \`${{ steps.alb.outputs.external_dns_role_arn }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **cert-manager**: \`${{ steps.alb.outputs.cert_manager_role_arn }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Run **SA Infra - Ingress Controllers** workflow with these outputs" >> $GITHUB_STEP_SUMMARY
          echo "2. Or use the **SA Infra - Complete Deployment** for full automation" >> $GITHUB_STEP_SUMMARY
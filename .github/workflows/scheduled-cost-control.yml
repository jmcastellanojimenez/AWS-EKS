name: üí∞ Manual Cost Control

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Cost Control Action'
        required: true
        type: choice
        options:
        - shutdown
        - startup
        - status
      environment:
        description: 'Target Environment'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      force:
        description: 'Force action (bypass safety checks)'
        required: false
        default: false
        type: boolean

permissions:
  id-token: write
  contents: read
  actions: write

jobs:
  determine-action:
    name: üéØ Determine Action
    runs-on: ubuntu-latest
    outputs:
      action: ${{ steps.determine.outputs.action }}
      environment: ${{ steps.determine.outputs.environment }}
      should-proceed: ${{ steps.determine.outputs.should-proceed }}
    steps:
      - name: Determine Action Based on Schedule
        id: determine
        run: |
          current_hour=$(date +%H)
          current_day=$(date +%u)  # 1=Monday, 5=Friday, 6=Saturday, 7=Sunday
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "action=${{ inputs.action }}" >> $GITHUB_OUTPUT
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should-proceed=true" >> $GITHUB_OUTPUT
          else
            # Scheduled run - determine action based on time
            if [[ "$current_day" == "5" && "$current_hour" == "18" ]]; then
              # Friday 6 PM - weekend shutdown
              echo "action=shutdown" >> $GITHUB_OUTPUT
              echo "environment=dev" >> $GITHUB_OUTPUT
              echo "should-proceed=true" >> $GITHUB_OUTPUT
              echo "üîÑ Weekend shutdown triggered"
            elif [[ "$current_day" == "1" && "$current_hour" == "8" ]]; then
              # Monday 8 AM - weekend startup
              echo "action=startup" >> $GITHUB_OUTPUT
              echo "environment=dev" >> $GITHUB_OUTPUT
              echo "should-proceed=true" >> $GITHUB_OUTPUT
              echo "üîÑ Weekend startup triggered"
            elif [[ "$current_hour" == "22" ]]; then
              # 10 PM - nightly shutdown (weekdays only)
              if [[ "$current_day" -le "5" ]]; then
                echo "action=shutdown" >> $GITHUB_OUTPUT
                echo "environment=dev" >> $GITHUB_OUTPUT
                echo "should-proceed=true" >> $GITHUB_OUTPUT
                echo "üîÑ Nightly shutdown triggered"
              else
                echo "should-proceed=false" >> $GITHUB_OUTPUT
              fi
            elif [[ "$current_hour" == "6" && "$current_day" -le "5" ]]; then
              # 6 AM - morning startup (weekdays only)
              echo "action=startup" >> $GITHUB_OUTPUT
              echo "environment=dev" >> $GITHUB_OUTPUT
              echo "should-proceed=true" >> $GITHUB_OUTPUT
              echo "üîÑ Morning startup triggered"
            else
              echo "should-proceed=false" >> $GITHUB_OUTPUT
              echo "No action needed at this time"
            fi
          fi

  pre-action-check:
    name: üîç Pre-Action Check
    runs-on: ubuntu-latest
    needs: determine-action
    if: needs.determine-action.outputs.should-proceed == 'true'
    outputs:
      current-cost: ${{ steps.cost-check.outputs.current-cost }}
      cluster-status: ${{ steps.cluster-check.outputs.status }}
      running-workloads: ${{ steps.workload-check.outputs.running-workloads }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-CostControl-Check

      - name: Check Current Costs
        id: cost-check
        run: |
          start_date=$(date -d "$(date +%Y-%m-01)" +%Y-%m-%d)
          end_date=$(date +%Y-%m-%d)
          
          cost_response=$(aws ce get-cost-and-usage \
            --time-period Start=$start_date,End=$end_date \
            --granularity MONTHLY \
            --metrics BlendedCost \
            --filter file://<(cat <<EOF
          {
            "Dimensions": {
              "Key": "LINKED_ACCOUNT",
              "Values": ["${{ secrets.AWS_ACCOUNT_ID }}"]
            }
          }
          EOF
          ))
          
          total_cost=$(echo "$cost_response" | jq -r '.ResultsByTime[0].Total.BlendedCost.Amount // "0"')
          echo "current-cost=$total_cost" >> $GITHUB_OUTPUT
          echo "Current month cost: $$total_cost"

      - name: Check Cluster Status
        id: cluster-check
        run: |
          clusters=$(aws eks list-clusters --query 'clusters' --output json)
          cluster_count=$(echo "$clusters" | jq length)
          
          if [[ $cluster_count -gt 0 ]]; then
            echo "status=running" >> $GITHUB_OUTPUT
            # Get first cluster name for operations
            first_cluster=$(echo "$clusters" | jq -r '.[0]')
            echo "first_cluster_name=$first_cluster" >> $GITHUB_OUTPUT
            echo "Found $cluster_count active clusters: $first_cluster"
          else
            echo "status=stopped" >> $GITHUB_OUTPUT
            echo "No active clusters found"
          fi

      - name: Check Running Workloads
        id: workload-check
        if: steps.cluster-check.outputs.status == 'running'
        run: |
          first_cluster='${{ steps.cluster-check.outputs.first_cluster_name }}'
          
          if [[ "$first_cluster" != "" && "$first_cluster" != "null" ]]; then
            # Setup kubectl
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl && sudo mv kubectl /usr/local/bin/
            
            # Update kubeconfig
            aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name "$first_cluster"
            
            # Check for running workloads
            running_pods=$(kubectl get pods --all-namespaces --field-selector=status.phase=Running | wc -l)
            critical_namespaces=$(kubectl get pods -n kube-system,monitoring,argocd --field-selector=status.phase=Running 2>/dev/null | wc -l)
            
            echo "running-workloads=$running_pods" >> $GITHUB_OUTPUT
            echo "critical-workloads=$critical_namespaces" >> $GITHUB_OUTPUT
            echo "Found $running_pods running pods, $critical_namespaces in critical namespaces"
          else
            echo "running-workloads=0" >> $GITHUB_OUTPUT
          fi

  cost-control-action:
    name: üí∞ Execute Cost Control
    runs-on: ubuntu-latest
    needs: [determine-action, pre-action-check]
    if: needs.determine-action.outputs.should-proceed == 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions-CostControl-Action

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: '1.6.0'
          terraform_wrapper: false

      - name: Execute Shutdown Action
        if: needs.determine-action.outputs.action == 'shutdown'
        run: |
          environment="${{ needs.determine-action.outputs.environment }}"
          current_cost="${{ needs.pre-action-check.outputs.current-cost }}"
          
          echo "## üõë Executing Shutdown for Cost Control" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: $environment" >> $GITHUB_STEP_SUMMARY
          echo "**Current Month Cost**: $$current_cost" >> $GITHUB_STEP_SUMMARY
          echo "**Action**: Shutdown cluster to save costs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          cd terraform/environments/$environment
          
          # Initialize Terraform
          terraform init -backend-config="bucket=eks-learning-lab-terraform-state-${{ secrets.AWS_ACCOUNT_ID }}"
          
          # Create destroy plan
          terraform plan -destroy -out=destroy-plan
          
          # Apply destroy (only if cluster is running)
          if [[ "${{ needs.pre-action-check.outputs.cluster-status }}" == "running" ]]; then
            echo "Shutting down infrastructure..."
            terraform apply destroy-plan
            echo "‚úÖ Infrastructure shutdown completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ÑπÔ∏è Infrastructure already shutdown" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Execute Startup Action
        if: needs.determine-action.outputs.action == 'startup'
        run: |
          environment="${{ needs.determine-action.outputs.environment }}"
          
          echo "## üöÄ Executing Startup to Resume Operations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: $environment" >> $GITHUB_STEP_SUMMARY
          echo "**Action**: Start cluster for active work hours" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          cd terraform/environments/$environment
          
          # Initialize Terraform
          terraform init -backend-config="bucket=eks-learning-lab-terraform-state-${{ secrets.AWS_ACCOUNT_ID }}"
          
          # Refresh state to detect any drift
          echo "üîÑ Refreshing Terraform state..."
          terraform refresh || {
            echo "‚ö†Ô∏è State refresh failed, attempting recovery..." >> $GITHUB_STEP_SUMMARY
            # Clean up any problematic state
            terraform state list | grep -E "(kms_alias|kms_key)" | xargs -r terraform state rm || true
          }
          
          # Create apply plan with retry logic
          echo "üìã Creating deployment plan..."
          if ! terraform plan -out=apply-plan; then
            echo "‚ùå Plan failed, attempting state recovery..." >> $GITHUB_STEP_SUMMARY
            # Try to import existing resources if they exist
            cluster_name=$(aws eks list-clusters --query 'clusters[0]' --output text 2>/dev/null || echo "")
            if [[ "$cluster_name" != "" && "$cluster_name" != "None" ]]; then
              echo "Found existing cluster: $cluster_name, updating state..."
              # Try again after discovery
              terraform plan -out=apply-plan || {
                echo "‚ùå Cannot recover, manual intervention needed" >> $GITHUB_STEP_SUMMARY
                exit 1
              }
            else
              echo "No existing resources found, proceeding with fresh deployment"
              terraform plan -out=apply-plan
            fi
          fi
          
          # Apply plan (both for startup and infrastructure updates)
          if [[ "${{ needs.pre-action-check.outputs.cluster-status }}" != "running" ]]; then
            echo "üöÄ Starting up infrastructure..."
            if terraform apply apply-plan; then
              echo "‚úÖ Infrastructure startup completed" >> $GITHUB_STEP_SUMMARY
              echo "üõ†Ô∏è Triggering tools installation..." >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ùå Startup failed, check logs for details" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          else
            echo "üîÑ Infrastructure already running, checking for updates..."
            # Apply any infrastructure changes (like instance type upgrades)
            if terraform apply apply-plan; then
              echo "‚úÖ Infrastructure updates applied" >> $GITHUB_STEP_SUMMARY
              echo "üîÑ Node group will be updated with new configuration" >> $GITHUB_STEP_SUMMARY
              echo "üõ†Ô∏è Triggering tools installation..." >> $GITHUB_STEP_SUMMARY
            else
              echo "‚ÑπÔ∏è No infrastructure changes needed" >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Status Check Action
        if: needs.determine-action.outputs.action == 'status'
        run: |
          echo "## üìä Infrastructure Status Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Current Month Cost**: $${{ needs.pre-action-check.outputs.current-cost }}" >> $GITHUB_STEP_SUMMARY
          echo "**Cluster Status**: ${{ needs.pre-action-check.outputs.cluster-status }}" >> $GITHUB_STEP_SUMMARY
          echo "**Running Workloads**: ${{ needs.pre-action-check.outputs.running-workloads }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Show next scheduled actions
          echo "### ‚è∞ Next Scheduled Actions" >> $GITHUB_STEP_SUMMARY
          echo "- **Nightly Shutdown**: 10:00 PM UTC (weekdays)" >> $GITHUB_STEP_SUMMARY
          echo "- **Morning Startup**: 6:00 AM UTC (weekdays)" >> $GITHUB_STEP_SUMMARY
          echo "- **Weekend Shutdown**: Friday 6:00 PM UTC" >> $GITHUB_STEP_SUMMARY
          echo "- **Weekend Startup**: Monday 8:00 AM UTC" >> $GITHUB_STEP_SUMMARY

  trigger-tools-installation:
    name: üõ†Ô∏è Trigger Tools Installation
    runs-on: ubuntu-latest
    needs: [determine-action, cost-control-action]
    if: needs.determine-action.outputs.action == 'startup' && needs.cost-control-action.result == 'success'
    steps:
      - name: Wait for Cluster Ready
        run: |
          echo "Waiting 3 minutes for cluster to be fully ready..."
          sleep 180

      - name: Trigger Tools Installation
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'install-tools.yml',
              ref: 'main',
              inputs: {
                environment: '${{ needs.determine-action.outputs.environment }}',
                cluster_name: 'eks-learning-lab-${{ needs.determine-action.outputs.environment }}',
                tool_category: 'core'
              }
            });

  cost-impact-report:
    name: üìà Cost Impact Report
    runs-on: ubuntu-latest
    needs: [determine-action, cost-control-action]
    if: always() && needs.determine-action.outputs.should-proceed == 'true'
    steps:
      - name: Generate Cost Impact Report
        run: |
          action="${{ needs.determine-action.outputs.action }}"
          current_cost="${{ needs.pre-action-check.outputs.current-cost }}"
          
          echo "## üí∞ Cost Control Impact Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Action**: $action" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ needs.determine-action.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Pre-Action Cost**: $$current_cost" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$action" == "shutdown" ]]; then
            echo "### üí° Expected Savings" >> $GITHUB_STEP_SUMMARY
            echo "- **EKS Cluster**: ~\$2.40/day saved" >> $GITHUB_STEP_SUMMARY
            echo "- **EC2 Nodes**: ~\$3.00/day saved (t3.medium spots)" >> $GITHUB_STEP_SUMMARY
            echo "- **Total Daily Savings**: ~\$5.40" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Weekend Shutdown Savings**: ~\$10.80 (2 days)" >> $GITHUB_STEP_SUMMARY
            echo "**Nightly Shutdown Savings**: ~\$2.25 (10 hours)" >> $GITHUB_STEP_SUMMARY
          elif [[ "$action" == "startup" ]]; then
            echo "### üîÑ Infrastructure Resumed" >> $GITHUB_STEP_SUMMARY
            echo "- Cluster available for learning and development" >> $GITHUB_STEP_SUMMARY
            echo "- Tools installation triggered automatically" >> $GITHUB_STEP_SUMMARY
            echo "- Cost monitoring active" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Cost Control Schedule" >> $GITHUB_STEP_SUMMARY
          echo "| Time | Action | Frequency | Savings |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| 6:00 AM UTC | Startup | Weekdays | - |" >> $GITHUB_STEP_SUMMARY
          echo "| 10:00 PM UTC | Shutdown | Weekdays | \$1.95/day |" >> $GITHUB_STEP_SUMMARY
          echo "| Friday 6:00 PM | Shutdown | Weekend | \$7.80/weekend |" >> $GITHUB_STEP_SUMMARY
          echo "| Monday 8:00 AM | Startup | Weekend | - |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Estimated Monthly Savings**: ~\$85-100 from scheduled shutdowns" >> $GITHUB_STEP_SUMMARY
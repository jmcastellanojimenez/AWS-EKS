apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: security-scan
  namespace: tekton-pipelines
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Security
    tekton.dev/tags: security, trivy, vulnerability, compliance
    tekton.dev/displayName: "Container Security Scan"
    tekton.dev/platforms: "linux/amd64,linux/arm64"
spec:
  description: >-
    This task performs comprehensive security scanning of container images using Trivy.
    It scans for vulnerabilities, misconfigurations, and compliance issues.
  
  params:
    - name: IMAGE
      description: Reference of the image to scan
      type: string
    - name: SCAN_TYPE
      description: Type of scan (image, fs, config)
      type: string
      default: "image"
    - name: FORMAT
      description: Output format (table, json, sarif, template)
      type: string
      default: "table"
    - name: SEVERITY
      description: Severity levels to report (UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL)
      type: string
      default: "HIGH,CRITICAL"
    - name: EXIT_CODE
      description: Exit code when vulnerabilities are found
      type: string
      default: "0"
    - name: SKIP_FILES
      description: Comma-separated list of file patterns to skip
      type: string
      default: ""
    - name: SKIP_DIRS
      description: Comma-separated list of directories to skip
      type: string
      default: ""
    - name: TIMEOUT
      description: Timeout for the scan
      type: string
      default: "5m"
    - name: CACHE_DIR
      description: Cache directory for Trivy DB
      type: string
      default: "/tmp/trivy-cache"
    - name: REPORT_OUTPUT
      description: Whether to output report to workspace
      type: string
      default: "true"

  workspaces:
    - name: source
      description: Source code workspace (optional)
      optional: true
    - name: reports
      description: Directory to store scan reports
      optional: true

  results:
    - name: SCAN_RESULT
      description: Result of the security scan (PASS/FAIL)
    - name: VULNERABILITIES_COUNT
      description: Number of vulnerabilities found
    - name: REPORT_PATH
      description: Path to the detailed scan report

  steps:
    - name: scan-image
      image: aquasec/trivy:latest
      workingDir: /tmp
      env:
        - name: TRIVY_CACHE_DIR
          value: "$(params.CACHE_DIR)"
      script: |
        #!/bin/sh
        set -e
        
        echo "Starting security scan with Trivy..."
        echo "Image: $(params.IMAGE)"
        echo "Scan Type: $(params.SCAN_TYPE)"
        echo "Severity: $(params.SEVERITY)"
        echo "Format: $(params.FORMAT)"
        
        # Prepare skip options
        SKIP_OPTIONS=""
        if [ -n "$(params.SKIP_FILES)" ]; then
          SKIP_OPTIONS="${SKIP_OPTIONS} --skip-files $(params.SKIP_FILES)"
        fi
        if [ -n "$(params.SKIP_DIRS)" ]; then
          SKIP_OPTIONS="${SKIP_OPTIONS} --skip-dirs $(params.SKIP_DIRS)"
        fi
        
        # Determine scan target
        SCAN_TARGET=""
        if [ "$(params.SCAN_TYPE)" = "fs" ] && [ -d "$(workspaces.source.path)" ]; then
          SCAN_TARGET="$(workspaces.source.path)"
        else
          SCAN_TARGET="$(params.IMAGE)"
        fi
        
        echo "Scanning target: ${SCAN_TARGET}"
        
        # Run the scan
        trivy $(params.SCAN_TYPE) \
          --format $(params.FORMAT) \
          --severity $(params.SEVERITY) \
          --exit-code $(params.EXIT_CODE) \
          --timeout $(params.TIMEOUT) \
          --no-progress \
          --cache-dir $(params.CACHE_DIR) \
          ${SKIP_OPTIONS} \
          "${SCAN_TARGET}" | tee /tmp/scan-output.txt
        
        # Check scan results
        if [ $? -eq 0 ]; then
          echo "PASS" | tee $(results.SCAN_RESULT.path)
          echo "Security scan passed successfully"
        else
          echo "FAIL" | tee $(results.SCAN_RESULT.path)
          echo "Security scan found issues"
        fi

    - name: generate-report
      image: aquasec/trivy:latest
      when:
        - input: "$(params.REPORT_OUTPUT)"
          operator: in
          values: ["true", "True", "TRUE"]
      env:
        - name: TRIVY_CACHE_DIR
          value: "$(params.CACHE_DIR)"
      script: |
        #!/bin/sh
        set -e
        
        echo "Generating detailed security report..."
        
        # Determine report path
        if [ -d "$(workspaces.reports.path)" ]; then
          REPORT_PATH="$(workspaces.reports.path)/security-report.json"
        else
          REPORT_PATH="/tmp/security-report.json"
        fi
        
        # Determine scan target
        SCAN_TARGET=""
        if [ "$(params.SCAN_TYPE)" = "fs" ] && [ -d "$(workspaces.source.path)" ]; then
          SCAN_TARGET="$(workspaces.source.path)"
        else
          SCAN_TARGET="$(params.IMAGE)"
        fi
        
        # Generate JSON report
        trivy $(params.SCAN_TYPE) \
          --format json \
          --severity $(params.SEVERITY) \
          --timeout $(params.TIMEOUT) \
          --no-progress \
          --cache-dir $(params.CACHE_DIR) \
          --output "${REPORT_PATH}" \
          "${SCAN_TARGET}"
        
        echo "Report generated at: ${REPORT_PATH}"
        echo -n "${REPORT_PATH}" | tee $(results.REPORT_PATH.path)
        
        # Extract vulnerability count from JSON report
        if command -v jq >/dev/null 2>&1; then
          VULN_COUNT=$(jq '[.Results[]?.Vulnerabilities[]?] | length' "${REPORT_PATH}" 2>/dev/null || echo "0")
        else
          # Fallback if jq is not available
          VULN_COUNT=$(grep -o '"Vulnerabilities"' "${REPORT_PATH}" 2>/dev/null | wc -l || echo "0")
        fi
        
        echo -n "${VULN_COUNT}" | tee $(results.VULNERABILITIES_COUNT.path)
        echo "Found ${VULN_COUNT} vulnerabilities"

    - name: sarif-report
      image: aquasec/trivy:latest
      when:
        - input: "$(params.FORMAT)"
          operator: in
          values: ["sarif"]
      env:
        - name: TRIVY_CACHE_DIR
          value: "$(params.CACHE_DIR)"
      script: |
        #!/bin/sh
        set -e
        
        echo "Generating SARIF report for code analysis tools..."
        
        # Determine report path
        if [ -d "$(workspaces.reports.path)" ]; then
          SARIF_PATH="$(workspaces.reports.path)/security-report.sarif"
        else
          SARIF_PATH="/tmp/security-report.sarif"
        fi
        
        # Determine scan target
        SCAN_TARGET=""
        if [ "$(params.SCAN_TYPE)" = "fs" ] && [ -d "$(workspaces.source.path)" ]; then
          SCAN_TARGET="$(workspaces.source.path)"
        else
          SCAN_TARGET="$(params.IMAGE)"
        fi
        
        # Generate SARIF report
        trivy $(params.SCAN_TYPE) \
          --format sarif \
          --severity $(params.SEVERITY) \
          --timeout $(params.TIMEOUT) \
          --no-progress \
          --cache-dir $(params.CACHE_DIR) \
          --output "${SARIF_PATH}" \
          "${SCAN_TARGET}"
        
        echo "SARIF report generated at: ${SARIF_PATH}"
        
        # Display summary
        if [ -f "${SARIF_PATH}" ]; then
          echo "SARIF report size: $(stat -c%s "${SARIF_PATH}") bytes"
        fi

    - name: compliance-check
      image: aquasec/trivy:latest
      env:
        - name: TRIVY_CACHE_DIR
          value: "$(params.CACHE_DIR)"
      script: |
        #!/bin/sh
        set -e
        
        echo "Running compliance checks..."
        
        # Check if image exists for compliance scanning
        if [ "$(params.SCAN_TYPE)" = "image" ]; then
          echo "Running Docker CIS benchmark compliance check..."
          
          trivy image \
            --compliance docker-cis \
            --format table \
            --severity $(params.SEVERITY) \
            --timeout $(params.TIMEOUT) \
            --no-progress \
            --cache-dir $(params.CACHE_DIR) \
            "$(params.IMAGE)" || true
        else
          echo "Compliance check skipped for non-image scans"
        fi
        
        echo "Compliance check completed"

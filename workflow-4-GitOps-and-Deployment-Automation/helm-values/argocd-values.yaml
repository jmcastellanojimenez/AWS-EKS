# ArgoCD Production Helm Values
# Integrates with existing Ambassador ingress and LGTM observability stack

global:
  # Domain configuration - replace with your actual domain
  domain: argocd.your-domain.com
  
# ArgoCD Server Configuration
server:
  replicas: 2
  
  # Resource requirements
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi
  
  # Ingress via Ambassador
  ingress:
    enabled: true
    ingressClassName: ambassador
    annotations:
      getambassador.io/config: |
        ---
        apiVersion: getambassador.io/v3alpha1
        kind: Mapping
        name: argocd-server
        prefix: /
        service: argocd-server:80
        host: argocd.your-domain.com
        tls: argocd-tls
        timeout_ms: 30000
        retry_policy:
          retry_on: "5xx"
          num_retries: 3
        headers:
          x-forwarded-proto: https
    hosts:
      - argocd.your-domain.com
    tls:
      - secretName: argocd-tls
        hosts:
          - argocd.your-domain.com
  
  # Service configuration
  service:
    type: ClusterIP
    port: 80
    
  # Metrics for Prometheus integration
  metrics:
    enabled: true
    service:
      type: ClusterIP
      port: 8083
      serviceMonitor:
        enabled: true
        namespace: argocd
        labels:
          app.kubernetes.io/name: argocd-server-metrics
          app.kubernetes.io/part-of: argocd
          prometheus.io/service-monitor: "true"
        selector:
          matchLabels:
            app.kubernetes.io/name: argocd-server-metrics
        endpoints:
          - port: metrics
            interval: 30s
            path: /metrics

# ArgoCD Controller Configuration
controller:
  replicas: 2
  
  # Resource requirements
  resources:
    requests:
      cpu: 250m
      memory: 1Gi
    limits:
      cpu: 500m
      memory: 2Gi
  
  # Metrics for Prometheus integration
  metrics:
    enabled: true
    service:
      type: ClusterIP
      port: 8082
      serviceMonitor:
        enabled: true
        namespace: argocd
        labels:
          app.kubernetes.io/name: argocd-application-controller-metrics
          app.kubernetes.io/part-of: argocd
          prometheus.io/service-monitor: "true"
        selector:
          matchLabels:
            app.kubernetes.io/name: argocd-application-controller-metrics
        endpoints:
          - port: metrics
            interval: 30s
            path: /metrics

# Repository Server Configuration
repoServer:
  replicas: 2
  
  # Resource requirements
  resources:
    requests:
      cpu: 10m
      memory: 64Mi
    limits:
      cpu: 50m
      memory: 128Mi
  
  # Metrics for Prometheus integration
  metrics:
    enabled: true
    service:
      type: ClusterIP
      port: 8084
      serviceMonitor:
        enabled: true
        namespace: argocd
        labels:
          app.kubernetes.io/name: argocd-repo-server-metrics
          app.kubernetes.io/part-of: argocd
          prometheus.io/service-monitor: "true"
        selector:
          matchLabels:
            app.kubernetes.io/name: argocd-repo-server-metrics
        endpoints:
          - port: metrics
            interval: 30s
            path: /metrics

# ApplicationSet Controller Configuration
applicationSet:
  enabled: true
  replicas: 2
  
  # Resource requirements
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi
  
  # Metrics for Prometheus integration
  metrics:
    enabled: true
    service:
      type: ClusterIP
      port: 8080
      serviceMonitor:
        enabled: true
        namespace: argocd
        labels:
          app.kubernetes.io/name: argocd-applicationset-controller-metrics
          app.kubernetes.io/part-of: argocd
          prometheus.io/service-monitor: "true"
        selector:
          matchLabels:
            app.kubernetes.io/name: argocd-applicationset-controller-metrics
        endpoints:
          - port: metrics
            interval: 30s
            path: /metrics

# Notifications Controller Configuration
notifications:
  enabled: true
  
  # Slack integration (configure webhook URL as secret)
  secret:
    create: true
    items:
      slack-token: "" # Will be provided via secret
  
  notifiers:
    service.slack: |
      token: $slack-token
      username: ArgoCD
      channel: "#deployments"
  
  # Notification templates
  templates:
    template.app-deployed: |
      message: |
        üöÄ Application {{.app.metadata.name}} deployed successfully!
        Environment: {{.app.metadata.labels.environment}}
        Repository: {{.app.spec.source.repoURL}}
        Target Revision: {{.app.spec.source.targetRevision}}
      slack:
        attachments: |
          [{
            "title": "{{.app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#18be52",
            "fields": [
              {
                "title": "Sync Status",
                "value": "{{.app.status.sync.status}}",
                "short": true
              },
              {
                "title": "Health Status", 
                "value": "{{.app.status.health.status}}",
                "short": true
              }
            ]
          }]
    
    template.app-health-degraded: |
      message: |
        ‚ö†Ô∏è Application {{.app.metadata.name}} health is degraded
        Environment: {{.app.metadata.labels.environment}}
      slack:
        attachments: |
          [{
            "title": "{{.app.metadata.name}}",
            "title_link": "{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "warning",
            "fields": [
              {
                "title": "Health Status",
                "value": "{{.app.status.health.status}}",
                "short": true
              }
            ]
          }]
  
  # Notification triggers
  triggers:
    trigger.on-deployed: |
      - when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
        send: [app-deployed]
    trigger.on-health-degraded: |
      - when: app.status.health.status == 'Degraded'
        send: [app-health-degraded]
        
  # Metrics for Prometheus integration
  metrics:
    enabled: true
    service:
      type: ClusterIP
      port: 9001
      serviceMonitor:
        enabled: true
        namespace: argocd
        labels:
          app.kubernetes.io/name: argocd-notifications-controller-metrics
          app.kubernetes.io/part-of: argocd
          prometheus.io/service-monitor: "true"
        selector:
          matchLabels:
            app.kubernetes.io/name: argocd-notifications-controller-metrics
        endpoints:
          - port: metrics
            interval: 30s
            path: /metrics

# Redis Configuration for ArgoCD
redis:
  enabled: true
  
  # Resource requirements
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 200m
      memory: 256Mi
  
  # Metrics for Prometheus integration
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      namespace: argocd
      labels:
        app.kubernetes.io/name: argocd-redis-metrics
        app.kubernetes.io/part-of: argocd
        prometheus.io/service-monitor: "true"
      selector:
        matchLabels:
          app.kubernetes.io/name: argocd-redis-metrics
      endpoints:
        - port: http-metrics
          interval: 30s
          path: /metrics

# Configuration Management
configs:
  # ArgoCD Configuration Map
  cm:
    # Server configuration
    server.insecure: "false"
    server.rootpath: "/"
    server.grpc.web: "true"
    
    # Repository timeout settings
    timeout.reconciliation: "180s"
    timeout.hard.reconciliation: "0s"
    
    # Application sync settings
    application.instanceLabelKey: argocd.argoproj.io/instance
    
    # Resource exclusions for better performance
    resource.exclusions: |
      - apiVersions:
        - "v1"
        kinds:
        - "Event"
    
    # Resource inclusions
    resource.inclusions: |
      - apiVersions:
        - "*"
        kinds:
        - "*"
        clusters:
        - "*"
    
    # URL for ArgoCD UI
    url: https://argocd.your-domain.com
    
    # Help chat URL (optional)
    help.chatUrl: "https://slack.company.com/channels/argocd-support"
    help.chatText: "Need help? Chat with us!"
    
    # Application links
    application.links: |
      - url: https://grafana.your-domain.com/d/{{.metadata.labels.service}}-dashboard
        title: Grafana Dashboard
        description: View metrics and logs for this application
        icon.class: "fa fa-chart-line"
      - url: https://tekton.your-domain.com/
        title: Tekton Pipelines
        description: View CI/CD pipeline runs
        icon.class: "fa fa-rocket"

  # RBAC Configuration
  rbac:
    policy.default: role:readonly
    policy.csv: |
      # Admin role - full access
      p, role:admin, applications, *, *, allow
      p, role:admin, clusters, *, *, allow
      p, role:admin, repositories, *, *, allow
      p, role:admin, logs, get, *, allow
      p, role:admin, exec, create, *, allow
      
      # Developer role - limited access
      p, role:developer, applications, get, */*, allow
      p, role:developer, applications, sync, */*, allow
      p, role:developer, applications, action/*, */*, allow
      p, role:developer, logs, get, *, allow
      p, role:developer, repositories, get, *, allow
      
      # Readonly role - view only
      p, role:readonly, applications, get, *, allow
      p, role:readonly, repositories, get, *, allow
      p, role:readonly, logs, get, *, allow
      
      # Group mappings (configure with your OIDC/LDAP groups)
      g, ecotrack-admins, role:admin
      g, ecotrack-developers, role:developer
      g, ecotrack-viewers, role:readonly

  # Repository credentials and certificates
  credentialTemplates:
    github-template:
      url: "https://github.com/your-org"
      username: "{{ .github_username }}"
      password: "{{ .github_token }}"
  
  repositories:
    - type: git
      url: https://github.com/your-org/ecotrack-manifests
      name: ecotrack-manifests

# Dex OIDC Configuration (disabled - using built-in authentication)
dex:
  enabled: false

# Additional pod labels for service discovery
podLabels:
  app.kubernetes.io/part-of: argocd
  prometheus.io/scrape: "true"

# Pod annotations for monitoring
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "8080"
  prometheus.io/path: "/metrics"

# Node selector for pod placement
nodeSelector:
  kubernetes.io/os: linux

# Tolerations for pod scheduling
tolerations: []

# Affinity rules for pod placement
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: argocd-server
        topologyKey: kubernetes.io/hostname

# Security context
securityContext:
  runAsNonRoot: true
  runAsUser: 999
  fsGroup: 999

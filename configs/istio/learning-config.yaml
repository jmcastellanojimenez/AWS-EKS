# Istio Configuration for EKS Learning Lab
# Optimized for learning and cost efficiency

# Istio Gateway for sample applications
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: learning-lab-gateway
  namespace: sample-apps
spec:
  selector:
    istio: ingressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "learning-lab.local"
    - "bookinfo.local"
    - "samples.local"

---
# Virtual Service for BookInfo application
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: bookinfo
  namespace: sample-apps
spec:
  hosts:
  - "bookinfo.local"
  gateways:
  - learning-lab-gateway
  http:
  - match:
    - uri:
        exact: /productpage
    - uri:
        prefix: /static
    - uri:
        exact: /login
    - uri:
        exact: /logout
    - uri:
        prefix: /api/v1/products
    route:
    - destination:
        host: productpage
        port:
          number: 9080

---
# Destination Rules for load balancing and circuit breaking
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: productpage
  namespace: sample-apps
spec:
  host: productpage
  trafficPolicy:
    loadBalancer:
      simple: LEAST_CONN
    connectionPool:
      tcp:
        maxConnections: 10
      http:
        http1MaxPendingRequests: 10
        maxRequestsPerConnection: 2
    circuitBreaker:
      consecutiveErrors: 3
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
    retryPolicy:
      attempts: 3
      perTryTimeout: 2s

---
# Destination Rule for reviews service with version-based routing
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: reviews
  namespace: sample-apps
spec:
  host: reviews
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
  subsets:
  - name: v1
    labels:
      version: v1
  - name: v2
    labels:
      version: v2
  - name: v3
    labels:
      version: v3

---
# Virtual Service for A/B testing and canary deployments
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: reviews
  namespace: sample-apps
spec:
  hosts:
  - reviews
  http:
  - match:
    - headers:
        end-user:
          exact: jason
    route:
    - destination:
        host: reviews
        subset: v2
  - route:
    - destination:
        host: reviews
        subset: v1
      weight: 90
    - destination:
        host: reviews
        subset: v3
      weight: 10

---
# Security Policy - PeerAuthentication
apiVersion: security.istio.io/v1beta1
kind: PeerAuthentication
metadata:
  name: default
  namespace: sample-apps
spec:
  mtls:
    mode: STRICT

---
# Authorization Policy for learning
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: allow-productpage
  namespace: sample-apps
spec:
  selector:
    matchLabels:
      app: productpage
  rules:
  - from:
    - source:
        principals: ["cluster.local/ns/istio-system/sa/istio-ingressgateway-service-account"]
  - to:
    - operation:
        methods: ["GET", "POST"]

---
# Telemetry configuration for learning
apiVersion: telemetry.istio.io/v1alpha1
kind: Telemetry
metadata:
  name: default
  namespace: sample-apps
spec:
  metrics:
  - providers:
    - name: prometheus
  - overrides:
    - match:
        metric: ALL_METRICS
      tagOverrides:
        request_protocol:
          value: "http"
  accessLogging:
  - providers:
    - name: otel
  tracing:
  - providers:
    - name: jaeger

---
# Envoy Filter for advanced traffic management
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: custom-headers
  namespace: sample-apps
spec:
  workloadSelector:
    labels:
      app: productpage
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: SIDECAR_INBOUND
      listener:
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.filters.http.wasm
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.http.wasm.v3.Wasm
          config:
            name: "custom_headers"
            root_id: "custom_headers"
            configuration:
              "@type": type.googleapis.com/google.protobuf.StringValue
              value: |
                {
                  "headers": {
                    "x-learning-lab": "eks-demo",
                    "x-environment": "development"
                  }
                }

---
# Service Entry for external service calls
apiVersion: networking.istio.io/v1beta1
kind: ServiceEntry
metadata:
  name: httpbin-ext
  namespace: sample-apps
spec:
  hosts:
  - httpbin.org
  ports:
  - number: 80
    name: http
    protocol: HTTP
  location: MESH_EXTERNAL
  resolution: DNS

---
# Sidecar configuration for resource optimization
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: default
  namespace: sample-apps
spec:
  egress:
  - hosts:
    - "./*"
    - "istio-system/*"
    - "monitoring/*"
  outboundTrafficPolicy:
    mode: REGISTRY_ONLY

---
# Workload Entry for external workloads (learning example)
apiVersion: networking.istio.io/v1beta1
kind: WorkloadEntry
metadata:
  name: external-service
  namespace: sample-apps
spec:
  address: "192.168.1.100"
  ports:
    http: 8080
  labels:
    app: external-service
    version: v1

---
# Request Authentication for JWT validation
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: jwt-example
  namespace: sample-apps
spec:
  selector:
    matchLabels:
      app: productpage
  jwtRules:
  - issuer: "testing@secure.istio.io"
    jwksUri: "https://raw.githubusercontent.com/istio/istio/release-1.19/security/tools/jwt/samples/jwks.json"

---
# Traffic simulation for learning
apiVersion: v1
kind: ConfigMap
metadata:
  name: traffic-generator
  namespace: sample-apps
data:
  generate-traffic.sh: |
    #!/bin/bash
    # Simple traffic generator for learning
    
    while true; do
      # Generate normal traffic
      curl -s http://productpage:9080/productpage >/dev/null
      sleep 2
      
      # Generate traffic with user header
      curl -s -H "end-user: jason" http://productpage:9080/productpage >/dev/null
      sleep 3
      
      # Generate some errors for testing
      if [ $((RANDOM % 10)) -eq 0 ]; then
        curl -s http://productpage:9080/nonexistent >/dev/null
      fi
      
      sleep 5
    done

---
# Traffic generator deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traffic-generator
  namespace: sample-apps
spec:
  replicas: 1
  selector:
    matchLabels:
      app: traffic-generator
  template:
    metadata:
      labels:
        app: traffic-generator
      annotations:
        sidecar.istio.io/inject: "true"
    spec:
      containers:
      - name: traffic-generator
        image: curlimages/curl:latest
        command: ["/bin/sh"]
        args: ["/scripts/generate-traffic.sh"]
        resources:
          requests:
            cpu: 10m
            memory: 32Mi
          limits:
            cpu: 50m
            memory: 64Mi
        volumeMounts:
        - name: scripts
          mountPath: /scripts
      volumes:
      - name: scripts
        configMap:
          name: traffic-generator
          defaultMode: 0755